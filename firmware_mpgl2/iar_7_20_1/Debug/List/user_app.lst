###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        29/Mar/2016  19:51:14
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Jonathan\Desktop\MPG -
#        User\firmware_mpg_common\application\user_app.c
#    Command line =  
#        "C:\Users\Jonathan\Desktop\MPG -
#        User\firmware_mpg_common\application\user_app.c" -D MPGL2
#        --preprocess=cl "C:\Users\Jonathan\Desktop\MPG -
#        User\firmware_mpgl2\iar_7_20_1\Debug\List\" -lC
#        "C:\Users\Jonathan\Desktop\MPG -
#        User\firmware_mpgl2\iar_7_20_1\Debug\List\" -o
#        "C:\Users\Jonathan\Desktop\MPG -
#        User\firmware_mpgl2\iar_7_20_1\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "C:\Users\Jonathan\Desktop\MPG
#        - User\firmware_mpgl2\iar_7_20_1\" -I "C:\Users\Jonathan\Desktop\MPG -
#        User\firmware_mpgl2\iar_7_20_1\..\bsp\" -I
#        "C:\Users\Jonathan\Desktop\MPG -
#        User\firmware_mpgl2\iar_7_20_1\..\drivers\" -I
#        "C:\Users\Jonathan\Desktop\MPG -
#        User\firmware_mpgl2\iar_7_20_1\..\application\" -I
#        "C:\Users\Jonathan\Desktop\MPG -
#        User\firmware_mpgl2\iar_7_20_1\..\libraries\captouch\" -I
#        "C:\Users\Jonathan\Desktop\MPG -
#        User\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\" -I
#        "C:\Users\Jonathan\Desktop\MPG -
#        User\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\application\"
#        -I "C:\Users\Jonathan\Desktop\MPG -
#        User\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\cmsis\" -I
#        "C:\Users\Jonathan\Desktop\MPG -
#        User\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\drivers\" -On
#        --use_c++_inline --require_prototypes -I "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\Jonathan\Desktop\MPG -
#        User\firmware_mpgl2\iar_7_20_1\Debug\List\user_app.lst
#    Object file  =  
#        C:\Users\Jonathan\Desktop\MPG -
#        User\firmware_mpgl2\iar_7_20_1\Debug\Obj\user_app.o
#
###############################################################################

C:\Users\Jonathan\Desktop\MPG - User\firmware_mpg_common\application\user_app.c
      1          /**********************************************************************************************************************
      2          File: user_app.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app as a template:
      6           1. Copy both user_app.c and user_app.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserAppInitialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserAppRunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"

  /**********************************************************************************************************************
                                                                                                                        ^
"C:\Users\Jonathan\Desktop\MPG - User\firmware_mpg_common\configuration.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserAppFlags;                       /* Global state flags */
   \                     G_u32UserAppFlags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          
     56          /***********************************************************************************************************************
     57          Global variable definitions with scope limited to this local application.
     58          Variable names shall start with "UserApp_" and be declared as static.
     59          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     60          static fnCode_type UserApp_StateMachine;            /* The state machine function pointer */
   \                     UserApp_StateMachine:
   \   00000000                      DS8 4
     61          static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
     62          
     63          
     64          /**********************************************************************************************************************
     65          Function Definitions
     66          **********************************************************************************************************************/
     67          
     68          /*--------------------------------------------------------------------------------------------------------------------*/
     69          /* Public functions                                                                                                   */
     70          /*--------------------------------------------------------------------------------------------------------------------*/
     71          
     72          
     73          /*--------------------------------------------------------------------------------------------------------------------*/
     74          /* Protected functions                                                                                                */
     75          /*--------------------------------------------------------------------------------------------------------------------*/
     76          
     77          /*--------------------------------------------------------------------------------------------------------------------
     78          Function: UserAppInitialize
     79          
     80          Description:
     81          Initializes the State Machine and its variables.
     82          
     83          Requires:
     84            -
     85          
     86          Promises:
     87            - 
     88          */

   \                                 In section .text, align 2, keep-with-next
     89          void UserAppInitialize(void)
     90          {
   \                     UserAppInitialize: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     91          
     92            /* If good initialization, set state to Idle */
     93            if( 1 /* Add condition for good init */)
     94            {
     95              UserApp_StateMachine = Menu;
   \   00000004   0x.... 0x....      ADR.W    R0,Menu
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable6
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     96            }
     97            else
     98            {
     99              /* The task isn't properly initialized, so shut it down and don't run */
    100              UserApp_StateMachine = UserAppSM_FailedInit;
    101            }
    102            
    103            LcdClearScreen();
   \   0000000E   0x.... 0x....      BL       LcdClearScreen
    104            u8 au8DataContent[] = "Push Button1 to Play";
   \   00000012   0xA801             ADD      R0,SP,#+4
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable6_1
   \   00000018   0x2215             MOVS     R2,#+21
   \   0000001A   0x.... 0x....      BL       __aeabi_memcpy
    105            PixelAddressType loc1 = {15, 0};
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x9000             STR      R0,[SP, #+0]
    106            LcdLoadString(au8DataContent, LCD_FONT_SMALL, &loc1);
   \   00000026   0xAA00             ADD      R2,SP,#+0
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xA801             ADD      R0,SP,#+4
   \   0000002C   0x.... 0x....      BL       LcdLoadString
    107            
    108            LedOff(RED0);
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      BL       LedOff
    109            LedOff(RED1);
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      BL       LedOff
    110            LedOff(RED2);
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x.... 0x....      BL       LedOff
    111            LedOff(RED3);
   \   00000042   0x2003             MOVS     R0,#+3
   \   00000044   0x.... 0x....      BL       LedOff
    112            LedOff(BLUE0);
   \   00000048   0x2008             MOVS     R0,#+8
   \   0000004A   0x.... 0x....      BL       LedOff
    113            LedOff(BLUE1);
   \   0000004E   0x2009             MOVS     R0,#+9
   \   00000050   0x.... 0x....      BL       LedOff
    114            LedOff(BLUE2);
   \   00000054   0x200A             MOVS     R0,#+10
   \   00000056   0x.... 0x....      BL       LedOff
    115            LedOff(BLUE3);
   \   0000005A   0x200B             MOVS     R0,#+11
   \   0000005C   0x.... 0x....      BL       LedOff
    116            LedOff(GREEN0);
   \   00000060   0x2004             MOVS     R0,#+4
   \   00000062   0x.... 0x....      BL       LedOff
    117            LedOff(GREEN1);
   \   00000066   0x2005             MOVS     R0,#+5
   \   00000068   0x.... 0x....      BL       LedOff
    118            LedOff(GREEN2);
   \   0000006C   0x2006             MOVS     R0,#+6
   \   0000006E   0x.... 0x....      BL       LedOff
    119            LedOff(GREEN3);
   \   00000072   0x2007             MOVS     R0,#+7
   \   00000074   0x.... 0x....      BL       LedOff
    120          
    121              
    122          } /* end UserAppInitialize() */
   \   00000078   0xB007             ADD      SP,SP,#+28
   \   0000007A   0xBD00             POP      {PC}             ;; return
    123          
    124          
    125          /*----------------------------------------------------------------------------------------------------------------------
    126          Function UserAppRunActiveState()
    127          
    128          Description:
    129          Selects and runs one iteration of the current state in the state machine.
    130          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    131          may take 1ms / n to execute.
    132          
    133          Requires:
    134            - State machine function pointer points at current state
    135          
    136          Promises:
    137            - Calls the function to pointed by the state machine function pointer
    138          */

   \                                 In section .text, align 2, keep-with-next
    139          void UserAppRunActiveState(void)
    140          {
   \                     UserAppRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    141            UserApp_StateMachine();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable6
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x4780             BLX      R0
    142          } /* end UserAppRunActiveState */
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    143          
    144          
    145          /*--------------------------------------------------------------------------------------------------------------------*/
    146          /* Private functions                                                                                                  */
    147          /*--------------------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    148          void PlaceObjectR (PixelAddressType* object)
    149          {
   \                     PlaceObjectR: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    150               object->u16PixelRowAddress = rand() % 63 + 1;
   \   00000004   0x.... 0x....      BL       rand
   \   00000008   0x213F             MOVS     R1,#+63
   \   0000000A   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000000E   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x8020             STRH     R0,[R4, #+0]
    151               LcdSetPixel(object); 
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       LcdSetPixel
    152               object->u16PixelRowAddress++;
   \   0000001C   0x8820             LDRH     R0,[R4, #+0]
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x8020             STRH     R0,[R4, #+0]
    153               LcdSetPixel(object); 
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       LcdSetPixel
    154               object->u16PixelRowAddress -= 2;
   \   00000028   0x8820             LDRH     R0,[R4, #+0]
   \   0000002A   0x1E80             SUBS     R0,R0,#+2
   \   0000002C   0x8020             STRH     R0,[R4, #+0]
    155               LcdSetPixel(object); 
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       LcdSetPixel
    156               object->u16PixelRowAddress++;
   \   00000034   0x8820             LDRH     R0,[R4, #+0]
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0x8020             STRH     R0,[R4, #+0]
    157          }
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return
    158          

   \                                 In section .text, align 2, keep-with-next
    159          void PlaceObject (PixelAddressType* object)
    160          {
   \                     PlaceObject: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    161               LcdSetPixel(object); 
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       LcdSetPixel
    162               object->u16PixelRowAddress++;
   \   0000000A   0x8820             LDRH     R0,[R4, #+0]
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \   0000000E   0x8020             STRH     R0,[R4, #+0]
    163               LcdSetPixel(object); 
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       LcdSetPixel
    164               object->u16PixelRowAddress -= 2;
   \   00000016   0x8820             LDRH     R0,[R4, #+0]
   \   00000018   0x1E80             SUBS     R0,R0,#+2
   \   0000001A   0x8020             STRH     R0,[R4, #+0]
    165               LcdSetPixel(object); 
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       LcdSetPixel
    166               object->u16PixelRowAddress++;
   \   00000022   0x8820             LDRH     R0,[R4, #+0]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x8020             STRH     R0,[R4, #+0]
    167          }
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    168          

   \                                 In section .text, align 2, keep-with-next
    169          u16 Fire(u32 c, u16 y, PixelAddressType* object, PixelAddressType* object2, PixelAddressType* object3)
    170          {
   \                     Fire: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8020      LDR      R8,[SP, #+32]
    171              PixelAddressType bullet = {y,8};
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0xF8AD 0x5000      STRH     R5,[SP, #+0]
    172              bullet.u16PixelColumnAddress += (1200 - c) / 10;
   \   0000001E   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000022   0xF5D4 0x6196      RSBS     R1,R4,#+1200
   \   00000026   0x220A             MOVS     R2,#+10
   \   00000028   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   0000002C   0x1808             ADDS     R0,R1,R0
   \   0000002E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    173          
    174                  LcdClearPixel(&bullet);
   \   00000032   0xA800             ADD      R0,SP,#+0
   \   00000034   0x.... 0x....      BL       LcdClearPixel
    175                  bullet.u16PixelColumnAddress++;
   \   00000038   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    176                  
    177                  if (   bullet.u16PixelColumnAddress >= object->u16PixelColumnAddress - 1       // target hit
    178                      && bullet.u16PixelColumnAddress <= object->u16PixelColumnAddress + 1
    179                      && bullet.u16PixelRowAddress >= object->u16PixelRowAddress - 1 
    180                      && bullet.u16PixelRowAddress <= object->u16PixelRowAddress + 1)
   \   00000042   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000046   0x8871             LDRH     R1,[R6, #+2]
   \   00000048   0x1E49             SUBS     R1,R1,#+1
   \   0000004A   0x4288             CMP      R0,R1
   \   0000004C   0xDB2A             BLT.N    ??Fire_0
   \   0000004E   0x8870             LDRH     R0,[R6, #+2]
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \   00000052   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000056   0x4288             CMP      R0,R1
   \   00000058   0xDB24             BLT.N    ??Fire_0
   \   0000005A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000005E   0x8831             LDRH     R1,[R6, #+0]
   \   00000060   0x1E49             SUBS     R1,R1,#+1
   \   00000062   0x4288             CMP      R0,R1
   \   00000064   0xDB1E             BLT.N    ??Fire_0
   \   00000066   0x8830             LDRH     R0,[R6, #+0]
   \   00000068   0x1C40             ADDS     R0,R0,#+1
   \   0000006A   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000006E   0x4288             CMP      R0,R1
   \   00000070   0xDB18             BLT.N    ??Fire_0
    181                  {
    182                    LcdClearPixel(object);                        // remove target
   \   00000072   0x0030             MOVS     R0,R6
   \   00000074   0x.... 0x....      BL       LcdClearPixel
    183                    object->u16PixelRowAddress++;
   \   00000078   0x8830             LDRH     R0,[R6, #+0]
   \   0000007A   0x1C40             ADDS     R0,R0,#+1
   \   0000007C   0x8030             STRH     R0,[R6, #+0]
    184                    LcdClearPixel(object);
   \   0000007E   0x0030             MOVS     R0,R6
   \   00000080   0x.... 0x....      BL       LcdClearPixel
    185                    object->u16PixelRowAddress -= 2;
   \   00000084   0x8830             LDRH     R0,[R6, #+0]
   \   00000086   0x1E80             SUBS     R0,R0,#+2
   \   00000088   0x8030             STRH     R0,[R6, #+0]
    186                    LcdClearPixel(object);
   \   0000008A   0x0030             MOVS     R0,R6
   \   0000008C   0x.... 0x....      BL       LcdClearPixel
    187                    object->u16PixelRowAddress++;
   \   00000090   0x8830             LDRH     R0,[R6, #+0]
   \   00000092   0x1C40             ADDS     R0,R0,#+1
   \   00000094   0x8030             STRH     R0,[R6, #+0]
    188                    object->u16PixelColumnAddress = 127;
   \   00000096   0x207F             MOVS     R0,#+127
   \   00000098   0x8070             STRH     R0,[R6, #+2]
    189                    PlaceObjectR(object);                  // add new target
   \   0000009A   0x0030             MOVS     R0,R6
   \   0000009C   0x.... 0x....      BL       PlaceObjectR
    190                    return 1;
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0xE079             B.N      ??Fire_1
    191                  }
    192                  else if (bullet.u16PixelColumnAddress >= object2->u16PixelColumnAddress - 1       // target hit
    193                      && bullet.u16PixelColumnAddress <= object2->u16PixelColumnAddress + 1
    194                      && bullet.u16PixelRowAddress >= object2->u16PixelRowAddress - 1 
    195                      && bullet.u16PixelRowAddress <= object2->u16PixelRowAddress + 1)
   \                     ??Fire_0: (+1)
   \   000000A4   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   000000A8   0x8879             LDRH     R1,[R7, #+2]
   \   000000AA   0x1E49             SUBS     R1,R1,#+1
   \   000000AC   0x4288             CMP      R0,R1
   \   000000AE   0xDB2A             BLT.N    ??Fire_2
   \   000000B0   0x8878             LDRH     R0,[R7, #+2]
   \   000000B2   0x1C40             ADDS     R0,R0,#+1
   \   000000B4   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   000000B8   0x4288             CMP      R0,R1
   \   000000BA   0xDB24             BLT.N    ??Fire_2
   \   000000BC   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000000C0   0x8839             LDRH     R1,[R7, #+0]
   \   000000C2   0x1E49             SUBS     R1,R1,#+1
   \   000000C4   0x4288             CMP      R0,R1
   \   000000C6   0xDB1E             BLT.N    ??Fire_2
   \   000000C8   0x8838             LDRH     R0,[R7, #+0]
   \   000000CA   0x1C40             ADDS     R0,R0,#+1
   \   000000CC   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   000000D0   0x4288             CMP      R0,R1
   \   000000D2   0xDB18             BLT.N    ??Fire_2
    196                  {
    197                    LcdClearPixel(object2);                        // remove target
   \   000000D4   0x0038             MOVS     R0,R7
   \   000000D6   0x.... 0x....      BL       LcdClearPixel
    198                    object2->u16PixelRowAddress++;
   \   000000DA   0x8838             LDRH     R0,[R7, #+0]
   \   000000DC   0x1C40             ADDS     R0,R0,#+1
   \   000000DE   0x8038             STRH     R0,[R7, #+0]
    199                    LcdClearPixel(object2);
   \   000000E0   0x0038             MOVS     R0,R7
   \   000000E2   0x.... 0x....      BL       LcdClearPixel
    200                    object2->u16PixelRowAddress -= 2;
   \   000000E6   0x8838             LDRH     R0,[R7, #+0]
   \   000000E8   0x1E80             SUBS     R0,R0,#+2
   \   000000EA   0x8038             STRH     R0,[R7, #+0]
    201                    LcdClearPixel(object2);
   \   000000EC   0x0038             MOVS     R0,R7
   \   000000EE   0x.... 0x....      BL       LcdClearPixel
    202                    object2->u16PixelRowAddress++;
   \   000000F2   0x8838             LDRH     R0,[R7, #+0]
   \   000000F4   0x1C40             ADDS     R0,R0,#+1
   \   000000F6   0x8038             STRH     R0,[R7, #+0]
    203                    object2->u16PixelColumnAddress = 125;
   \   000000F8   0x207D             MOVS     R0,#+125
   \   000000FA   0x8078             STRH     R0,[R7, #+2]
    204                    PlaceObjectR(object2);                  // add new target
   \   000000FC   0x0038             MOVS     R0,R7
   \   000000FE   0x.... 0x....      BL       PlaceObjectR
    205                    return 1;
   \   00000102   0x2001             MOVS     R0,#+1
   \   00000104   0xE048             B.N      ??Fire_1
    206                  }
    207                  else if (bullet.u16PixelColumnAddress >= object3->u16PixelColumnAddress - 1       // target hit
    208                      && bullet.u16PixelColumnAddress <= object3->u16PixelColumnAddress + 1
    209                      && bullet.u16PixelRowAddress >= object3->u16PixelRowAddress - 1 
    210                      && bullet.u16PixelRowAddress <= object3->u16PixelRowAddress + 1)
   \                     ??Fire_2: (+1)
   \   00000106   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000010A   0xF8B8 0x1002      LDRH     R1,[R8, #+2]
   \   0000010E   0x1E49             SUBS     R1,R1,#+1
   \   00000110   0x4288             CMP      R0,R1
   \   00000112   0xDB34             BLT.N    ??Fire_3
   \   00000114   0xF8B8 0x0002      LDRH     R0,[R8, #+2]
   \   00000118   0x1C40             ADDS     R0,R0,#+1
   \   0000011A   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   0000011E   0x4288             CMP      R0,R1
   \   00000120   0xDB2D             BLT.N    ??Fire_3
   \   00000122   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000126   0xF8B8 0x1000      LDRH     R1,[R8, #+0]
   \   0000012A   0x1E49             SUBS     R1,R1,#+1
   \   0000012C   0x4288             CMP      R0,R1
   \   0000012E   0xDB26             BLT.N    ??Fire_3
   \   00000130   0xF8B8 0x0000      LDRH     R0,[R8, #+0]
   \   00000134   0x1C40             ADDS     R0,R0,#+1
   \   00000136   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000013A   0x4288             CMP      R0,R1
   \   0000013C   0xDB1F             BLT.N    ??Fire_3
    211                  {
    212                    LcdClearPixel(object3);                        // remove target
   \   0000013E   0x4640             MOV      R0,R8
   \   00000140   0x.... 0x....      BL       LcdClearPixel
    213                    object3->u16PixelRowAddress++;
   \   00000144   0xF8B8 0x0000      LDRH     R0,[R8, #+0]
   \   00000148   0x1C40             ADDS     R0,R0,#+1
   \   0000014A   0xF8A8 0x0000      STRH     R0,[R8, #+0]
    214                    LcdClearPixel(object3);
   \   0000014E   0x4640             MOV      R0,R8
   \   00000150   0x.... 0x....      BL       LcdClearPixel
    215                    object3->u16PixelRowAddress -= 2;
   \   00000154   0xF8B8 0x0000      LDRH     R0,[R8, #+0]
   \   00000158   0x1E80             SUBS     R0,R0,#+2
   \   0000015A   0xF8A8 0x0000      STRH     R0,[R8, #+0]
    216                    LcdClearPixel(object3);
   \   0000015E   0x4640             MOV      R0,R8
   \   00000160   0x.... 0x....      BL       LcdClearPixel
    217                    object3->u16PixelRowAddress++;
   \   00000164   0xF8B8 0x0000      LDRH     R0,[R8, #+0]
   \   00000168   0x1C40             ADDS     R0,R0,#+1
   \   0000016A   0xF8A8 0x0000      STRH     R0,[R8, #+0]
    218                    object3->u16PixelColumnAddress = 123;
   \   0000016E   0x207B             MOVS     R0,#+123
   \   00000170   0xF8A8 0x0002      STRH     R0,[R8, #+2]
    219                    PlaceObjectR(object3);                  // add new target
   \   00000174   0x4640             MOV      R0,R8
   \   00000176   0x.... 0x....      BL       PlaceObjectR
    220                    return 1;
   \   0000017A   0x2001             MOVS     R0,#+1
   \   0000017C   0xE00C             B.N      ??Fire_1
    221                  }
    222                  else if (bullet.u16PixelColumnAddress == 128)           // target miss
   \                     ??Fire_3: (+1)
   \   0000017E   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000182   0x2880             CMP      R0,#+128
   \   00000184   0xD104             BNE.N    ??Fire_4
    223                  {
    224                    LcdClearPixel(&bullet);
   \   00000186   0xA800             ADD      R0,SP,#+0
   \   00000188   0x.... 0x....      BL       LcdClearPixel
    225                    return 2;
   \   0000018C   0x2002             MOVS     R0,#+2
   \   0000018E   0xE003             B.N      ??Fire_1
    226                  }
    227                  else                            // bullet is travelling
    228                    LcdSetPixel(&bullet);
   \                     ??Fire_4: (+1)
   \   00000190   0xA800             ADD      R0,SP,#+0
   \   00000192   0x.... 0x....      BL       LcdSetPixel
    229                  return 0;
   \   00000196   0x2000             MOVS     R0,#+0
   \                     ??Fire_1: (+1)
   \   00000198   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    230          }
    231          

   \                                 In section .text, align 2, keep-with-next
    232          void CenterGun(u8 offset)
    233          {
   \                     CenterGun: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    234              PixelAddressType gun = {offset + 1, 2};
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x9001             STR      R0,[SP, #+4]
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0x1C60             ADDS     R0,R4,#+1
   \   00000010   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    235              
    236              PixelAddressType Clearme = gun;
   \   00000014   0x9801             LDR      R0,[SP, #+4]
   \   00000016   0x9000             STR      R0,[SP, #+0]
    237              Clearme.u16PixelRowAddress++;
   \   00000018   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    238              LcdClearPixel(&Clearme);
   \   00000022   0xA800             ADD      R0,SP,#+0
   \   00000024   0x.... 0x....      BL       LcdClearPixel
    239              Clearme.u16PixelRowAddress -= 4;
   \   00000028   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000002C   0x1F00             SUBS     R0,R0,#+4
   \   0000002E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    240              LcdClearPixel(&Clearme);
   \   00000032   0xA800             ADD      R0,SP,#+0
   \   00000034   0x.... 0x....      BL       LcdClearPixel
    241              Clearme.u16PixelRowAddress++;
   \   00000038   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    242              Clearme.u16PixelColumnAddress++;
   \   00000042   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000046   0x1C40             ADDS     R0,R0,#+1
   \   00000048   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    243              LcdClearPixel(&Clearme);
   \   0000004C   0xA800             ADD      R0,SP,#+0
   \   0000004E   0x.... 0x....      BL       LcdClearPixel
    244              Clearme.u16PixelColumnAddress++;
   \   00000052   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000056   0x1C40             ADDS     R0,R0,#+1
   \   00000058   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    245              LcdClearPixel(&Clearme);
   \   0000005C   0xA800             ADD      R0,SP,#+0
   \   0000005E   0x.... 0x....      BL       LcdClearPixel
    246              Clearme.u16PixelColumnAddress++;
   \   00000062   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    247              LcdClearPixel(&Clearme);
   \   0000006C   0xA800             ADD      R0,SP,#+0
   \   0000006E   0x.... 0x....      BL       LcdClearPixel
    248              Clearme.u16PixelColumnAddress++;
   \   00000072   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000076   0x1C40             ADDS     R0,R0,#+1
   \   00000078   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    249              LcdClearPixel(&Clearme);
   \   0000007C   0xA800             ADD      R0,SP,#+0
   \   0000007E   0x.... 0x....      BL       LcdClearPixel
    250              Clearme.u16PixelRowAddress += 2;
   \   00000082   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000086   0x1C80             ADDS     R0,R0,#+2
   \   00000088   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    251              LcdClearPixel(&Clearme);
   \   0000008C   0xA800             ADD      R0,SP,#+0
   \   0000008E   0x.... 0x....      BL       LcdClearPixel
    252              Clearme.u16PixelColumnAddress--;
   \   00000092   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000096   0x1E40             SUBS     R0,R0,#+1
   \   00000098   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    253              LcdClearPixel(&Clearme);
   \   0000009C   0xA800             ADD      R0,SP,#+0
   \   0000009E   0x.... 0x....      BL       LcdClearPixel
    254              Clearme.u16PixelColumnAddress--;
   \   000000A2   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   000000A6   0x1E40             SUBS     R0,R0,#+1
   \   000000A8   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    255              LcdClearPixel(&Clearme);
   \   000000AC   0xA800             ADD      R0,SP,#+0
   \   000000AE   0x.... 0x....      BL       LcdClearPixel
    256              Clearme.u16PixelColumnAddress--;
   \   000000B2   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   000000B6   0x1E40             SUBS     R0,R0,#+1
   \   000000B8   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    257              LcdClearPixel(&Clearme);
   \   000000BC   0xA800             ADD      R0,SP,#+0
   \   000000BE   0x.... 0x....      BL       LcdClearPixel
    258          
    259              LcdSetPixel(&gun);
   \   000000C2   0xA801             ADD      R0,SP,#+4
   \   000000C4   0x.... 0x....      BL       LcdSetPixel
    260              gun.u16PixelRowAddress = offset-1;
   \   000000C8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000CA   0x1E60             SUBS     R0,R4,#+1
   \   000000CC   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    261              LcdSetPixel(&gun);
   \   000000D0   0xA801             ADD      R0,SP,#+4
   \   000000D2   0x.... 0x....      BL       LcdSetPixel
    262              gun.u16PixelRowAddress = offset;
   \   000000D6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D8   0xF8AD 0x4004      STRH     R4,[SP, #+4]
    263              LcdSetPixel(&gun);
   \   000000DC   0xA801             ADD      R0,SP,#+4
   \   000000DE   0x.... 0x....      BL       LcdSetPixel
    264              gun.u16PixelColumnAddress = 3;
   \   000000E2   0x2003             MOVS     R0,#+3
   \   000000E4   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    265              LcdSetPixel(&gun);
   \   000000E8   0xA801             ADD      R0,SP,#+4
   \   000000EA   0x.... 0x....      BL       LcdSetPixel
    266              gun.u16PixelColumnAddress = 4;
   \   000000EE   0x2004             MOVS     R0,#+4
   \   000000F0   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    267              LcdSetPixel(&gun);
   \   000000F4   0xA801             ADD      R0,SP,#+4
   \   000000F6   0x.... 0x....      BL       LcdSetPixel
    268              gun.u16PixelColumnAddress = 5;
   \   000000FA   0x2005             MOVS     R0,#+5
   \   000000FC   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    269              LcdSetPixel(&gun);
   \   00000100   0xA801             ADD      R0,SP,#+4
   \   00000102   0x.... 0x....      BL       LcdSetPixel
    270              gun.u16PixelColumnAddress = 6;
   \   00000106   0x2006             MOVS     R0,#+6
   \   00000108   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    271              LcdSetPixel(&gun);
   \   0000010C   0xA801             ADD      R0,SP,#+4
   \   0000010E   0x.... 0x....      BL       LcdSetPixel
    272          }
   \   00000112   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    273          

   \                                 In section .text, align 2, keep-with-next
    274          void Mary(u32 c)
    275          {
   \                     Mary: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    276                  if(c == 200)
   \   00000004   0x2CC8             CMP      R4,#+200
   \   00000006   0xD108             BNE.N    ??Mary_0
    277                  {
    278                    PWMAudioSetFrequency(BUZZER1,330);
   \   00000008   0xF44F 0x71A5      MOV      R1,#+330
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       PWMAudioSetFrequency
    279                    PWMAudioOn(BUZZER1);
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x.... 0x....      BL       PWMAudioOn
   \   00000018   0xE0B9             B.N      ??Mary_1
    280                  }
    281                  else if(c == 400)
   \                     ??Mary_0: (+1)
   \   0000001A   0xF5B4 0x7FC8      CMP      R4,#+400
   \   0000001E   0xD108             BNE.N    ??Mary_2
    282                  {
    283                    PWMAudioSetFrequency(BUZZER1,294);
   \   00000020   0xF44F 0x7193      MOV      R1,#+294
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x.... 0x....      BL       PWMAudioSetFrequency
    284                    PWMAudioOn(BUZZER1);
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x.... 0x....      BL       PWMAudioOn
   \   00000030   0xE0AD             B.N      ??Mary_1
    285                  }
    286                  else if(c == 600)
   \                     ??Mary_2: (+1)
   \   00000032   0xF5B4 0x7F16      CMP      R4,#+600
   \   00000036   0xD108             BNE.N    ??Mary_3
    287                  {
    288                    PWMAudioSetFrequency(BUZZER1,262);
   \   00000038   0xF44F 0x7183      MOV      R1,#+262
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x.... 0x....      BL       PWMAudioSetFrequency
    289                    PWMAudioOn(BUZZER1);
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x.... 0x....      BL       PWMAudioOn
   \   00000048   0xE0A1             B.N      ??Mary_1
    290                  }
    291                  else if(c == 800)
   \                     ??Mary_3: (+1)
   \   0000004A   0xF5B4 0x7F48      CMP      R4,#+800
   \   0000004E   0xD108             BNE.N    ??Mary_4
    292                  {
    293                    PWMAudioSetFrequency(BUZZER1,294);
   \   00000050   0xF44F 0x7193      MOV      R1,#+294
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x.... 0x....      BL       PWMAudioSetFrequency
    294                    PWMAudioOn(BUZZER1);
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x.... 0x....      BL       PWMAudioOn
   \   00000060   0xE095             B.N      ??Mary_1
    295                  }
    296                  else if(c == 1000)
   \                     ??Mary_4: (+1)
   \   00000062   0xF5B4 0x7F7A      CMP      R4,#+1000
   \   00000066   0xD108             BNE.N    ??Mary_5
    297                  {
    298                    PWMAudioSetFrequency(BUZZER1,330);
   \   00000068   0xF44F 0x71A5      MOV      R1,#+330
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x.... 0x....      BL       PWMAudioSetFrequency
    299                    PWMAudioOn(BUZZER1);
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0x.... 0x....      BL       PWMAudioOn
   \   00000078   0xE089             B.N      ??Mary_1
    300                  }
    301                  else if(c == 1190)
   \                     ??Mary_5: (+1)
   \   0000007A   0xF240 0x40A6      MOVW     R0,#+1190
   \   0000007E   0x4284             CMP      R4,R0
   \   00000080   0xD103             BNE.N    ??Mary_6
    302                  {
    303                    PWMAudioOff(BUZZER1);
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x.... 0x....      BL       PWMAudioOff
   \   00000088   0xE081             B.N      ??Mary_1
    304                  }
    305                  else if(c == 1200)
   \                     ??Mary_6: (+1)
   \   0000008A   0xF5B4 0x6F96      CMP      R4,#+1200
   \   0000008E   0xD108             BNE.N    ??Mary_7
    306                  {
    307                    PWMAudioSetFrequency(BUZZER1,330);
   \   00000090   0xF44F 0x71A5      MOV      R1,#+330
   \   00000094   0x2001             MOVS     R0,#+1
   \   00000096   0x.... 0x....      BL       PWMAudioSetFrequency
    308                    PWMAudioOn(BUZZER1);
   \   0000009A   0x2001             MOVS     R0,#+1
   \   0000009C   0x.... 0x....      BL       PWMAudioOn
   \   000000A0   0xE075             B.N      ??Mary_1
    309                  }
    310                  else if(c == 1390)
   \                     ??Mary_7: (+1)
   \   000000A2   0xF240 0x506E      MOVW     R0,#+1390
   \   000000A6   0x4284             CMP      R4,R0
   \   000000A8   0xD103             BNE.N    ??Mary_8
    311                  {
    312                    PWMAudioOff(BUZZER1);
   \   000000AA   0x2001             MOVS     R0,#+1
   \   000000AC   0x.... 0x....      BL       PWMAudioOff
   \   000000B0   0xE06D             B.N      ??Mary_1
    313                  }
    314                  else if(c == 1400)
   \                     ??Mary_8: (+1)
   \   000000B2   0xF5B4 0x6FAF      CMP      R4,#+1400
   \   000000B6   0xD108             BNE.N    ??Mary_9
    315                  {
    316                    PWMAudioSetFrequency(BUZZER1,330);
   \   000000B8   0xF44F 0x71A5      MOV      R1,#+330
   \   000000BC   0x2001             MOVS     R0,#+1
   \   000000BE   0x.... 0x....      BL       PWMAudioSetFrequency
    317                    PWMAudioOn(BUZZER1);
   \   000000C2   0x2001             MOVS     R0,#+1
   \   000000C4   0x.... 0x....      BL       PWMAudioOn
   \   000000C8   0xE061             B.N      ??Mary_1
    318                  }
    319                  else if(c == 1800)
   \                     ??Mary_9: (+1)
   \   000000CA   0xF5B4 0x6FE1      CMP      R4,#+1800
   \   000000CE   0xD108             BNE.N    ??Mary_10
    320                  {
    321                    PWMAudioSetFrequency(BUZZER1,294);
   \   000000D0   0xF44F 0x7193      MOV      R1,#+294
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0x.... 0x....      BL       PWMAudioSetFrequency
    322                    PWMAudioOn(BUZZER1);
   \   000000DA   0x2001             MOVS     R0,#+1
   \   000000DC   0x.... 0x....      BL       PWMAudioOn
   \   000000E0   0xE055             B.N      ??Mary_1
    323                  }
    324                  else if(c == 1990)
   \                     ??Mary_10: (+1)
   \   000000E2   0xF240 0x70C6      MOVW     R0,#+1990
   \   000000E6   0x4284             CMP      R4,R0
   \   000000E8   0xD103             BNE.N    ??Mary_11
    325                  {
    326                    PWMAudioOff(BUZZER1);
   \   000000EA   0x2001             MOVS     R0,#+1
   \   000000EC   0x.... 0x....      BL       PWMAudioOff
   \   000000F0   0xE04D             B.N      ??Mary_1
    327                  }
    328                  else if(c == 2000)
   \                     ??Mary_11: (+1)
   \   000000F2   0xF5B4 0x6FFA      CMP      R4,#+2000
   \   000000F6   0xD108             BNE.N    ??Mary_12
    329                  {
    330                    PWMAudioSetFrequency(BUZZER1,294);
   \   000000F8   0xF44F 0x7193      MOV      R1,#+294
   \   000000FC   0x2001             MOVS     R0,#+1
   \   000000FE   0x.... 0x....      BL       PWMAudioSetFrequency
    331                    PWMAudioOn(BUZZER1);
   \   00000102   0x2001             MOVS     R0,#+1
   \   00000104   0x.... 0x....      BL       PWMAudioOn
   \   00000108   0xE041             B.N      ??Mary_1
    332                  }
    333                  else if(c == 2190)
   \                     ??Mary_12: (+1)
   \   0000010A   0xF640 0x008E      MOVW     R0,#+2190
   \   0000010E   0x4284             CMP      R4,R0
   \   00000110   0xD103             BNE.N    ??Mary_13
    334                  {
    335                    PWMAudioOff(BUZZER1);
   \   00000112   0x2001             MOVS     R0,#+1
   \   00000114   0x.... 0x....      BL       PWMAudioOff
   \   00000118   0xE039             B.N      ??Mary_1
    336                  }
    337                  else if(c == 2200)
   \                     ??Mary_13: (+1)
   \   0000011A   0xF640 0x0098      MOVW     R0,#+2200
   \   0000011E   0x4284             CMP      R4,R0
   \   00000120   0xD108             BNE.N    ??Mary_14
    338                  {
    339                    PWMAudioSetFrequency(BUZZER1,294);
   \   00000122   0xF44F 0x7193      MOV      R1,#+294
   \   00000126   0x2001             MOVS     R0,#+1
   \   00000128   0x.... 0x....      BL       PWMAudioSetFrequency
    340                    PWMAudioOn(BUZZER1);
   \   0000012C   0x2001             MOVS     R0,#+1
   \   0000012E   0x.... 0x....      BL       PWMAudioOn
   \   00000132   0xE02C             B.N      ??Mary_1
    341                  }
    342                  else if(c == 2600)
   \                     ??Mary_14: (+1)
   \   00000134   0xF640 0x2028      MOVW     R0,#+2600
   \   00000138   0x4284             CMP      R4,R0
   \   0000013A   0xD108             BNE.N    ??Mary_15
    343                  {
    344                    PWMAudioSetFrequency(BUZZER1,330);
   \   0000013C   0xF44F 0x71A5      MOV      R1,#+330
   \   00000140   0x2001             MOVS     R0,#+1
   \   00000142   0x.... 0x....      BL       PWMAudioSetFrequency
    345                    PWMAudioOn(BUZZER1);
   \   00000146   0x2001             MOVS     R0,#+1
   \   00000148   0x.... 0x....      BL       PWMAudioOn
   \   0000014C   0xE01F             B.N      ??Mary_1
    346                  }
    347                  else if(c == 2800)
   \                     ??Mary_15: (+1)
   \   0000014E   0xF5B4 0x6F2F      CMP      R4,#+2800
   \   00000152   0xD108             BNE.N    ??Mary_16
    348                  {
    349                    PWMAudioSetFrequency(BUZZER1,392);
   \   00000154   0xF44F 0x71C4      MOV      R1,#+392
   \   00000158   0x2001             MOVS     R0,#+1
   \   0000015A   0x.... 0x....      BL       PWMAudioSetFrequency
    350                    PWMAudioOn(BUZZER1);
   \   0000015E   0x2001             MOVS     R0,#+1
   \   00000160   0x.... 0x....      BL       PWMAudioOn
   \   00000164   0xE013             B.N      ??Mary_1
    351                  }
    352                  else if(c == 2990)
   \                     ??Mary_16: (+1)
   \   00000166   0xF640 0x30AE      MOVW     R0,#+2990
   \   0000016A   0x4284             CMP      R4,R0
   \   0000016C   0xD103             BNE.N    ??Mary_17
    353                  {
    354                    PWMAudioOff(BUZZER1);
   \   0000016E   0x2001             MOVS     R0,#+1
   \   00000170   0x.... 0x....      BL       PWMAudioOff
   \   00000174   0xE00B             B.N      ??Mary_1
    355                  }
    356                  else if(c == 3000)
   \                     ??Mary_17: (+1)
   \   00000176   0xF640 0x30B8      MOVW     R0,#+3000
   \   0000017A   0x4284             CMP      R4,R0
   \   0000017C   0xD107             BNE.N    ??Mary_1
    357                  {
    358                    PWMAudioSetFrequency(BUZZER1,392);
   \   0000017E   0xF44F 0x71C4      MOV      R1,#+392
   \   00000182   0x2001             MOVS     R0,#+1
   \   00000184   0x.... 0x....      BL       PWMAudioSetFrequency
    359                    PWMAudioOn(BUZZER1);
   \   00000188   0x2001             MOVS     R0,#+1
   \   0000018A   0x.... 0x....      BL       PWMAudioOn
    360                  }
    361                  if(c == 3400)
   \                     ??Mary_1: (+1)
   \   0000018E   0xF640 0x5048      MOVW     R0,#+3400
   \   00000192   0x4284             CMP      R4,R0
   \   00000194   0xD108             BNE.N    ??Mary_18
    362                  {
    363                    PWMAudioSetFrequency(BUZZER1,330);
   \   00000196   0xF44F 0x71A5      MOV      R1,#+330
   \   0000019A   0x2001             MOVS     R0,#+1
   \   0000019C   0x.... 0x....      BL       PWMAudioSetFrequency
    364                    PWMAudioOn(BUZZER1);
   \   000001A0   0x2001             MOVS     R0,#+1
   \   000001A2   0x.... 0x....      BL       PWMAudioOn
   \   000001A6   0xE0BD             B.N      ??Mary_19
    365                  }
    366                  else if(c == 3600)
   \                     ??Mary_18: (+1)
   \   000001A8   0xF5B4 0x6F61      CMP      R4,#+3600
   \   000001AC   0xD108             BNE.N    ??Mary_20
    367                  {
    368                    PWMAudioSetFrequency(BUZZER1,294);
   \   000001AE   0xF44F 0x7193      MOV      R1,#+294
   \   000001B2   0x2001             MOVS     R0,#+1
   \   000001B4   0x.... 0x....      BL       PWMAudioSetFrequency
    369                    PWMAudioOn(BUZZER1);
   \   000001B8   0x2001             MOVS     R0,#+1
   \   000001BA   0x.... 0x....      BL       PWMAudioOn
   \   000001BE   0xE0B1             B.N      ??Mary_19
    370                  }
    371                  else if(c == 3800)
   \                     ??Mary_20: (+1)
   \   000001C0   0xF640 0x60D8      MOVW     R0,#+3800
   \   000001C4   0x4284             CMP      R4,R0
   \   000001C6   0xD108             BNE.N    ??Mary_21
    372                  {
    373                    PWMAudioSetFrequency(BUZZER1,262);
   \   000001C8   0xF44F 0x7183      MOV      R1,#+262
   \   000001CC   0x2001             MOVS     R0,#+1
   \   000001CE   0x.... 0x....      BL       PWMAudioSetFrequency
    374                    PWMAudioOn(BUZZER1);
   \   000001D2   0x2001             MOVS     R0,#+1
   \   000001D4   0x.... 0x....      BL       PWMAudioOn
   \   000001D8   0xE0A4             B.N      ??Mary_19
    375                  }
    376                  else if(c == 4000)
   \                     ??Mary_21: (+1)
   \   000001DA   0xF5B4 0x6F7A      CMP      R4,#+4000
   \   000001DE   0xD108             BNE.N    ??Mary_22
    377                  {
    378                    PWMAudioSetFrequency(BUZZER1,294);
   \   000001E0   0xF44F 0x7193      MOV      R1,#+294
   \   000001E4   0x2001             MOVS     R0,#+1
   \   000001E6   0x.... 0x....      BL       PWMAudioSetFrequency
    379                    PWMAudioOn(BUZZER1);
   \   000001EA   0x2001             MOVS     R0,#+1
   \   000001EC   0x.... 0x....      BL       PWMAudioOn
   \   000001F0   0xE098             B.N      ??Mary_19
    380                  }
    381                  else if(c == 4200)
   \                     ??Mary_22: (+1)
   \   000001F2   0xF241 0x0068      MOVW     R0,#+4200
   \   000001F6   0x4284             CMP      R4,R0
   \   000001F8   0xD108             BNE.N    ??Mary_23
    382                  {
    383                    PWMAudioSetFrequency(BUZZER1,330);
   \   000001FA   0xF44F 0x71A5      MOV      R1,#+330
   \   000001FE   0x2001             MOVS     R0,#+1
   \   00000200   0x.... 0x....      BL       PWMAudioSetFrequency
    384                    PWMAudioOn(BUZZER1);
   \   00000204   0x2001             MOVS     R0,#+1
   \   00000206   0x.... 0x....      BL       PWMAudioOn
   \   0000020A   0xE08B             B.N      ??Mary_19
    385                  }
    386                  else if(c == 4390)
   \                     ??Mary_23: (+1)
   \   0000020C   0xF241 0x1026      MOVW     R0,#+4390
   \   00000210   0x4284             CMP      R4,R0
   \   00000212   0xD103             BNE.N    ??Mary_24
    387                  {
    388                    PWMAudioOff(BUZZER1);
   \   00000214   0x2001             MOVS     R0,#+1
   \   00000216   0x.... 0x....      BL       PWMAudioOff
   \   0000021A   0xE083             B.N      ??Mary_19
    389                  }
    390                  else if(c == 4400)
   \                     ??Mary_24: (+1)
   \   0000021C   0xF241 0x1030      MOVW     R0,#+4400
   \   00000220   0x4284             CMP      R4,R0
   \   00000222   0xD108             BNE.N    ??Mary_25
    391                  {
    392                    PWMAudioSetFrequency(BUZZER1,330);
   \   00000224   0xF44F 0x71A5      MOV      R1,#+330
   \   00000228   0x2001             MOVS     R0,#+1
   \   0000022A   0x.... 0x....      BL       PWMAudioSetFrequency
    393                    PWMAudioOn(BUZZER1);
   \   0000022E   0x2001             MOVS     R0,#+1
   \   00000230   0x.... 0x....      BL       PWMAudioOn
   \   00000234   0xE076             B.N      ??Mary_19
    394                  }
    395                  else if(c == 4590)
   \                     ??Mary_25: (+1)
   \   00000236   0xF241 0x10EE      MOVW     R0,#+4590
   \   0000023A   0x4284             CMP      R4,R0
   \   0000023C   0xD103             BNE.N    ??Mary_26
    396                  {
    397                    PWMAudioOff(BUZZER1);
   \   0000023E   0x2001             MOVS     R0,#+1
   \   00000240   0x.... 0x....      BL       PWMAudioOff
   \   00000244   0xE06E             B.N      ??Mary_19
    398                  }
    399                  else if(c == 4600)
   \                     ??Mary_26: (+1)
   \   00000246   0xF241 0x10F8      MOVW     R0,#+4600
   \   0000024A   0x4284             CMP      R4,R0
   \   0000024C   0xD108             BNE.N    ??Mary_27
    400                  {
    401                    PWMAudioSetFrequency(BUZZER1,330);
   \   0000024E   0xF44F 0x71A5      MOV      R1,#+330
   \   00000252   0x2001             MOVS     R0,#+1
   \   00000254   0x.... 0x....      BL       PWMAudioSetFrequency
    402                    PWMAudioOn(BUZZER1);
   \   00000258   0x2001             MOVS     R0,#+1
   \   0000025A   0x.... 0x....      BL       PWMAudioOn
   \   0000025E   0xE061             B.N      ??Mary_19
    403                  }
    404                  else if(c == 4790)
   \                     ??Mary_27: (+1)
   \   00000260   0xF241 0x20B6      MOVW     R0,#+4790
   \   00000264   0x4284             CMP      R4,R0
   \   00000266   0xD103             BNE.N    ??Mary_28
    405                  {
    406                    PWMAudioOff(BUZZER1);
   \   00000268   0x2001             MOVS     R0,#+1
   \   0000026A   0x.... 0x....      BL       PWMAudioOff
   \   0000026E   0xE059             B.N      ??Mary_19
    407                  }
    408                  else if(c == 4800)
   \                     ??Mary_28: (+1)
   \   00000270   0xF5B4 0x5F96      CMP      R4,#+4800
   \   00000274   0xD108             BNE.N    ??Mary_29
    409                  {
    410                    PWMAudioSetFrequency(BUZZER1,330);
   \   00000276   0xF44F 0x71A5      MOV      R1,#+330
   \   0000027A   0x2001             MOVS     R0,#+1
   \   0000027C   0x.... 0x....      BL       PWMAudioSetFrequency
    411                    PWMAudioOn(BUZZER1);
   \   00000280   0x2001             MOVS     R0,#+1
   \   00000282   0x.... 0x....      BL       PWMAudioOn
   \   00000286   0xE04D             B.N      ??Mary_19
    412                  }
    413                  else if(c == 5000)
   \                     ??Mary_29: (+1)
   \   00000288   0xF241 0x3088      MOVW     R0,#+5000
   \   0000028C   0x4284             CMP      R4,R0
   \   0000028E   0xD108             BNE.N    ??Mary_30
    414                  {
    415                    PWMAudioSetFrequency(BUZZER1,294);
   \   00000290   0xF44F 0x7193      MOV      R1,#+294
   \   00000294   0x2001             MOVS     R0,#+1
   \   00000296   0x.... 0x....      BL       PWMAudioSetFrequency
    416                    PWMAudioOn(BUZZER1);
   \   0000029A   0x2001             MOVS     R0,#+1
   \   0000029C   0x.... 0x....      BL       PWMAudioOn
   \   000002A0   0xE040             B.N      ??Mary_19
    417                  }
    418                  else if(c == 5190)
   \                     ??Mary_30: (+1)
   \   000002A2   0xF241 0x4046      MOVW     R0,#+5190
   \   000002A6   0x4284             CMP      R4,R0
   \   000002A8   0xD103             BNE.N    ??Mary_31
    419                  {
    420                    PWMAudioOff(BUZZER1);
   \   000002AA   0x2001             MOVS     R0,#+1
   \   000002AC   0x.... 0x....      BL       PWMAudioOff
   \   000002B0   0xE038             B.N      ??Mary_19
    421                  }
    422                  else if(c == 5200)
   \                     ??Mary_31: (+1)
   \   000002B2   0xF241 0x4050      MOVW     R0,#+5200
   \   000002B6   0x4284             CMP      R4,R0
   \   000002B8   0xD108             BNE.N    ??Mary_32
    423                  {
    424                    PWMAudioSetFrequency(BUZZER1,294);
   \   000002BA   0xF44F 0x7193      MOV      R1,#+294
   \   000002BE   0x2001             MOVS     R0,#+1
   \   000002C0   0x.... 0x....      BL       PWMAudioSetFrequency
    425                    PWMAudioOn(BUZZER1);
   \   000002C4   0x2001             MOVS     R0,#+1
   \   000002C6   0x.... 0x....      BL       PWMAudioOn
   \   000002CA   0xE02B             B.N      ??Mary_19
    426                  }
    427                  else if(c == 5400)
   \                     ??Mary_32: (+1)
   \   000002CC   0xF241 0x5018      MOVW     R0,#+5400
   \   000002D0   0x4284             CMP      R4,R0
   \   000002D2   0xD108             BNE.N    ??Mary_33
    428                  {
    429                    PWMAudioSetFrequency(BUZZER1,330);
   \   000002D4   0xF44F 0x71A5      MOV      R1,#+330
   \   000002D8   0x2001             MOVS     R0,#+1
   \   000002DA   0x.... 0x....      BL       PWMAudioSetFrequency
    430                    PWMAudioOn(BUZZER1);
   \   000002DE   0x2001             MOVS     R0,#+1
   \   000002E0   0x.... 0x....      BL       PWMAudioOn
   \   000002E4   0xE01E             B.N      ??Mary_19
    431                  }
    432                  else if(c == 5600)
   \                     ??Mary_33: (+1)
   \   000002E6   0xF5B4 0x5FAF      CMP      R4,#+5600
   \   000002EA   0xD108             BNE.N    ??Mary_34
    433                  {
    434                    PWMAudioSetFrequency(BUZZER1,294);
   \   000002EC   0xF44F 0x7193      MOV      R1,#+294
   \   000002F0   0x2001             MOVS     R0,#+1
   \   000002F2   0x.... 0x....      BL       PWMAudioSetFrequency
    435                    PWMAudioOn(BUZZER1);
   \   000002F6   0x2001             MOVS     R0,#+1
   \   000002F8   0x.... 0x....      BL       PWMAudioOn
   \   000002FC   0xE012             B.N      ??Mary_19
    436                  }
    437                  else if(c == 5800)
   \                     ??Mary_34: (+1)
   \   000002FE   0xF241 0x60A8      MOVW     R0,#+5800
   \   00000302   0x4284             CMP      R4,R0
   \   00000304   0xD108             BNE.N    ??Mary_35
    438                  {
    439                    PWMAudioSetFrequency(BUZZER1,262);
   \   00000306   0xF44F 0x7183      MOV      R1,#+262
   \   0000030A   0x2001             MOVS     R0,#+1
   \   0000030C   0x.... 0x....      BL       PWMAudioSetFrequency
    440                    PWMAudioOn(BUZZER1);
   \   00000310   0x2001             MOVS     R0,#+1
   \   00000312   0x.... 0x....      BL       PWMAudioOn
   \   00000316   0xE005             B.N      ??Mary_19
    441                  }
    442                  else if(c == 6400)
   \                     ??Mary_35: (+1)
   \   00000318   0xF5B4 0x5FC8      CMP      R4,#+6400
   \   0000031C   0xD102             BNE.N    ??Mary_19
    443                  {
    444                    PWMAudioOff(BUZZER1);
   \   0000031E   0x2001             MOVS     R0,#+1
   \   00000320   0x.... 0x....      BL       PWMAudioOff
    445                  }
    446          }
   \                     ??Mary_19: (+1)
   \   00000324   0xBD10             POP      {R4,PC}          ;; return
    447          
    448          /**********************************************************************************************************************
    449          State Machine Function Definitions
    450          **********************************************************************************************************************/
    451          

   \                                 In section .text, align 4, keep-with-next
    452          static void Menu(void)
    453          {
   \                     Menu: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    454            if(WasButtonPressed(BUTTON1))                                 // Push button1 to activate game
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       WasButtonPressed
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD00E             BEQ.N    ??Menu_0
    455            { 
    456              ButtonAcknowledge(BUTTON1);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       ButtonAcknowledge
    457              // at the start, clear screen and place gun
    458              LcdClearScreen();
   \   00000012   0x.... 0x....      BL       LcdClearScreen
    459              CenterGun(32);
   \   00000016   0x2020             MOVS     R0,#+32
   \   00000018   0x.... 0x....      BL       CenterGun
    460              CapTouchOn();
   \   0000001C   0x.... 0x....      BL       CapTouchOn
    461              UserApp_StateMachine = ShooterGame;
   \   00000020   0x.... 0x....      ADR.W    R0,ShooterGame
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable6
   \   00000028   0x6008             STR      R0,[R1, #+0]
    462            } 
    463          } /* end Menu() */
   \                     ??Menu_0: (+1)
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
    464          

   \                                 In section .text, align 4, keep-with-next
    465          static void ShooterGame(void)
    466          {
   \                     ShooterGame: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0A0             SUB      SP,SP,#+128
    467              static u32 count = 0;  
    468              static int score = 0;
    469              static u32 reload = 0;
    470              static u16 ybullet = 32;
    471              static u16 y = 32;                                          // position of the vertical slider
    472              static PixelAddressType objt1 = {32, 127};                  // obstacle location
    473              static PixelAddressType objt2 = {42, 125};                  // obstacle location
    474              static PixelAddressType objt3 = {22, 123};                  // obstacle location
    475              static u16 speed = 500;
    476          
    477              
    478              if (count == 0)                                             // Set object to destroy at right end of screen
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable6_5
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD107             BNE.N    ??ShooterGame_0
    479              {
    480                PlaceObjectR(&objt1);
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   00000012   0x.... 0x....      BL       PlaceObjectR
    481                PlaceObjectR(&objt2);
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \   0000001A   0x.... 0x....      BL       PlaceObjectR
    482              }
    483              
    484              if (CaptouchCurrentVSlidePosition() < 255/2 - 40 && count % 100 == 0 && y > 0) // Lower y-position if Captouch is down every 100ms
   \                     ??ShooterGame_0: (+1)
   \   0000001E   0x.... 0x....      BL       CaptouchCurrentVSlidePosition
   \   00000022   0x2857             CMP      R0,#+87
   \   00000024   0xDA18             BGE.N    ??ShooterGame_1
   \   00000026   0x2064             MOVS     R0,#+100
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0x.... 0x....      LDR.W    R2,??DataTable6_5
   \   00000032   0x6812             LDR      R2,[R2, #+0]
   \   00000034   0xFBB2 0xF2F0      UDIV     R2,R2,R0
   \   00000038   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD10B             BNE.N    ??ShooterGame_1
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   00000044   0x8800             LDRH     R0,[R0, #+0]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD006             BEQ.N    ??ShooterGame_1
    485              {
    486                y--;
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   0000004E   0x8800             LDRH     R0,[R0, #+0]
   \   00000050   0x1E40             SUBS     R0,R0,#+1
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable6_8
   \   00000056   0x8008             STRH     R0,[R1, #+0]
    487              }
    488              
    489              if (CaptouchCurrentVSlidePosition() > 255/2 + 40 && count % 100 == 0 && y < 62)  // Raise y-position if Captouch is up every 100ms
   \                     ??ShooterGame_1: (+1)
   \   00000058   0x.... 0x....      BL       CaptouchCurrentVSlidePosition
   \   0000005C   0x28A8             CMP      R0,#+168
   \   0000005E   0xDB18             BLT.N    ??ShooterGame_2
   \   00000060   0x2064             MOVS     R0,#+100
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   00000066   0x6809             LDR      R1,[R1, #+0]
   \   00000068   0x.... 0x....      LDR.W    R2,??DataTable6_5
   \   0000006C   0x6812             LDR      R2,[R2, #+0]
   \   0000006E   0xFBB2 0xF2F0      UDIV     R2,R2,R0
   \   00000072   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD10B             BNE.N    ??ShooterGame_2
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   0000007E   0x8800             LDRH     R0,[R0, #+0]
   \   00000080   0x283E             CMP      R0,#+62
   \   00000082   0xDA06             BGE.N    ??ShooterGame_2
    490              {
    491                y++;
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   00000088   0x8800             LDRH     R0,[R0, #+0]
   \   0000008A   0x1C40             ADDS     R0,R0,#+1
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable6_8
   \   00000090   0x8008             STRH     R0,[R1, #+0]
    492              }
    493              
    494              if (count % 100 == 0)
   \                     ??ShooterGame_2: (+1)
   \   00000092   0x2064             MOVS     R0,#+100
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   00000098   0x6809             LDR      R1,[R1, #+0]
   \   0000009A   0x.... 0x....      LDR.W    R2,??DataTable6_5
   \   0000009E   0x6812             LDR      R2,[R2, #+0]
   \   000000A0   0xFBB2 0xF2F0      UDIV     R2,R2,R0
   \   000000A4   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD105             BNE.N    ??ShooterGame_3
    495              {
    496                CenterGun(y);             // Change gun position every 100ms
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   000000B0   0x8800             LDRH     R0,[R0, #+0]
   \   000000B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B4   0x.... 0x....      BL       CenterGun
    497              }
    498              if (count % 1000 == 0 && speed > 90) speed -= 10;
   \                     ??ShooterGame_3: (+1)
   \   000000B8   0xF44F 0x707A      MOV      R0,#+1000
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   000000C0   0x6809             LDR      R1,[R1, #+0]
   \   000000C2   0x.... 0x....      LDR.W    R2,??DataTable6_5
   \   000000C6   0x6812             LDR      R2,[R2, #+0]
   \   000000C8   0xFBB2 0xF2F0      UDIV     R2,R2,R0
   \   000000CC   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   000000D0   0x2800             CMP      R0,#+0
   \   000000D2   0xD10B             BNE.N    ??ShooterGame_4
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable6_9
   \   000000D8   0x8800             LDRH     R0,[R0, #+0]
   \   000000DA   0x285B             CMP      R0,#+91
   \   000000DC   0xDB06             BLT.N    ??ShooterGame_4
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable6_9
   \   000000E2   0x8800             LDRH     R0,[R0, #+0]
   \   000000E4   0x380A             SUBS     R0,R0,#+10
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable6_9
   \   000000EA   0x8008             STRH     R0,[R1, #+0]
    499              
    500              if (count % speed == 0)
   \                     ??ShooterGame_4: (+1)
   \   000000EC   0x.... 0x....      LDR.W    R0,??DataTable6_9
   \   000000F0   0x8800             LDRH     R0,[R0, #+0]
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   000000F6   0x6809             LDR      R1,[R1, #+0]
   \   000000F8   0x.... 0x....      LDR.W    R2,??DataTable6_5
   \   000000FC   0x6812             LDR      R2,[R2, #+0]
   \   000000FE   0xFBB2 0xF2F0      UDIV     R2,R2,R0
   \   00000102   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   00000106   0x2800             CMP      R0,#+0
   \   00000108   0xD172             BNE.N    ??ShooterGame_5
    501              {
    502                 // Move object closer
    503                 LcdClearPixel(&objt1);                        // remove target
   \   0000010A   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   0000010E   0x.... 0x....      BL       LcdClearPixel
    504                 objt1.u16PixelRowAddress++;
   \   00000112   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   00000116   0x8800             LDRH     R0,[R0, #+0]
   \   00000118   0x1C40             ADDS     R0,R0,#+1
   \   0000011A   0x.... 0x....      LDR.W    R1,??DataTable6_6
   \   0000011E   0x8008             STRH     R0,[R1, #+0]
    505                 LcdClearPixel(&objt1);
   \   00000120   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   00000124   0x.... 0x....      BL       LcdClearPixel
    506                 objt1.u16PixelRowAddress -= 2;
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   0000012C   0x8800             LDRH     R0,[R0, #+0]
   \   0000012E   0x1E80             SUBS     R0,R0,#+2
   \   00000130   0x.... 0x....      LDR.W    R1,??DataTable6_6
   \   00000134   0x8008             STRH     R0,[R1, #+0]
    507                 LcdClearPixel(&objt1);
   \   00000136   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   0000013A   0x.... 0x....      BL       LcdClearPixel
    508                 objt1.u16PixelRowAddress++;
   \   0000013E   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   00000142   0x8800             LDRH     R0,[R0, #+0]
   \   00000144   0x1C40             ADDS     R0,R0,#+1
   \   00000146   0x.... 0x....      LDR.W    R1,??DataTable6_6
   \   0000014A   0x8008             STRH     R0,[R1, #+0]
    509                 objt1.u16PixelColumnAddress--;
   \   0000014C   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   00000150   0x8840             LDRH     R0,[R0, #+2]
   \   00000152   0x1E40             SUBS     R0,R0,#+1
   \   00000154   0x.... 0x....      LDR.W    R1,??DataTable6_6
   \   00000158   0x8048             STRH     R0,[R1, #+2]
    510                 PlaceObject(&objt1);                  // add new target
   \   0000015A   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   0000015E   0x.... 0x....      BL       PlaceObject
    511                 
    512                 LcdClearPixel(&objt2);                        // remove target
   \   00000162   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \   00000166   0x.... 0x....      BL       LcdClearPixel
    513                 objt2.u16PixelRowAddress++;
   \   0000016A   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \   0000016E   0x8800             LDRH     R0,[R0, #+0]
   \   00000170   0x1C40             ADDS     R0,R0,#+1
   \   00000172   0x.... 0x....      LDR.W    R1,??DataTable6_7
   \   00000176   0x8008             STRH     R0,[R1, #+0]
    514                 LcdClearPixel(&objt2);
   \   00000178   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \   0000017C   0x.... 0x....      BL       LcdClearPixel
    515                 objt2.u16PixelRowAddress -= 2;
   \   00000180   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \   00000184   0x8800             LDRH     R0,[R0, #+0]
   \   00000186   0x1E80             SUBS     R0,R0,#+2
   \   00000188   0x.... 0x....      LDR.W    R1,??DataTable6_7
   \   0000018C   0x8008             STRH     R0,[R1, #+0]
    516                 LcdClearPixel(&objt2);
   \   0000018E   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \   00000192   0x.... 0x....      BL       LcdClearPixel
    517                 objt2.u16PixelRowAddress++;
   \   00000196   0x....             LDR.N    R0,??DataTable6_7
   \   00000198   0x8800             LDRH     R0,[R0, #+0]
   \   0000019A   0x1C40             ADDS     R0,R0,#+1
   \   0000019C   0x....             LDR.N    R1,??DataTable6_7
   \   0000019E   0x8008             STRH     R0,[R1, #+0]
    518                 objt2.u16PixelColumnAddress--;
   \   000001A0   0x....             LDR.N    R0,??DataTable6_7
   \   000001A2   0x8840             LDRH     R0,[R0, #+2]
   \   000001A4   0x1E40             SUBS     R0,R0,#+1
   \   000001A6   0x....             LDR.N    R1,??DataTable6_7
   \   000001A8   0x8048             STRH     R0,[R1, #+2]
    519                 PlaceObject(&objt2);                  // add new target
   \   000001AA   0x....             LDR.N    R0,??DataTable6_7
   \   000001AC   0x.... 0x....      BL       PlaceObject
    520                 
    521                 LcdClearPixel(&objt3);                        // remove target
   \   000001B0   0x....             LDR.N    R0,??DataTable6_10
   \   000001B2   0x.... 0x....      BL       LcdClearPixel
    522                 objt3.u16PixelRowAddress++;
   \   000001B6   0x....             LDR.N    R0,??DataTable6_10
   \   000001B8   0x8800             LDRH     R0,[R0, #+0]
   \   000001BA   0x1C40             ADDS     R0,R0,#+1
   \   000001BC   0x....             LDR.N    R1,??DataTable6_10
   \   000001BE   0x8008             STRH     R0,[R1, #+0]
    523                 LcdClearPixel(&objt3);
   \   000001C0   0x....             LDR.N    R0,??DataTable6_10
   \   000001C2   0x.... 0x....      BL       LcdClearPixel
    524                 objt3.u16PixelRowAddress -= 2;
   \   000001C6   0x....             LDR.N    R0,??DataTable6_10
   \   000001C8   0x8800             LDRH     R0,[R0, #+0]
   \   000001CA   0x1E80             SUBS     R0,R0,#+2
   \   000001CC   0x....             LDR.N    R1,??DataTable6_10
   \   000001CE   0x8008             STRH     R0,[R1, #+0]
    525                 LcdClearPixel(&objt3);
   \   000001D0   0x....             LDR.N    R0,??DataTable6_10
   \   000001D2   0x.... 0x....      BL       LcdClearPixel
    526                 objt3.u16PixelRowAddress++;
   \   000001D6   0x....             LDR.N    R0,??DataTable6_10
   \   000001D8   0x8800             LDRH     R0,[R0, #+0]
   \   000001DA   0x1C40             ADDS     R0,R0,#+1
   \   000001DC   0x....             LDR.N    R1,??DataTable6_10
   \   000001DE   0x8008             STRH     R0,[R1, #+0]
    527                 objt3.u16PixelColumnAddress--;
   \   000001E0   0x....             LDR.N    R0,??DataTable6_10
   \   000001E2   0x8840             LDRH     R0,[R0, #+2]
   \   000001E4   0x1E40             SUBS     R0,R0,#+1
   \   000001E6   0x....             LDR.N    R1,??DataTable6_10
   \   000001E8   0x8048             STRH     R0,[R1, #+2]
    528                 PlaceObject(&objt3);                  // add new target
   \   000001EA   0x....             LDR.N    R0,??DataTable6_10
   \   000001EC   0x.... 0x....      BL       PlaceObject
    529              }
    530                   
    531              if (count > 600)
   \                     ??ShooterGame_5: (+1)
   \   000001F0   0x....             LDR.N    R0,??DataTable6_5
   \   000001F2   0x6800             LDR      R0,[R0, #+0]
   \   000001F4   0xF5B0 0x7F16      CMP      R0,#+600
   \   000001F8   0xD94B             BLS.N    ??ShooterGame_6
    532              {
    533                if (IsButtonPressed(BUTTON1) && reload == 0)                // Fires a bullet if button1 is pushed and gun is reloaded
   \   000001FA   0x2001             MOVS     R0,#+1
   \   000001FC   0x.... 0x....      BL       IsButtonPressed
   \   00000200   0x2800             CMP      R0,#+0
   \   00000202   0xD00B             BEQ.N    ??ShooterGame_7
   \   00000204   0x....             LDR.N    R0,??DataTable6_11
   \   00000206   0x6800             LDR      R0,[R0, #+0]
   \   00000208   0x2800             CMP      R0,#+0
   \   0000020A   0xD107             BNE.N    ??ShooterGame_7
    534                {
    535                  reload = 1200;             // create a 1200ms reload time
   \   0000020C   0xF44F 0x6096      MOV      R0,#+1200
   \   00000210   0x....             LDR.N    R1,??DataTable6_11
   \   00000212   0x6008             STR      R0,[R1, #+0]
    536                  ybullet = y;
   \   00000214   0x....             LDR.N    R0,??DataTable6_8
   \   00000216   0x8800             LDRH     R0,[R0, #+0]
   \   00000218   0x....             LDR.N    R1,??DataTable6_12
   \   0000021A   0x8008             STRH     R0,[R1, #+0]
    537                }
    538                if (reload > 0)     // reload if needed, and make bullet go to the right
   \                     ??ShooterGame_7: (+1)
   \   0000021C   0x....             LDR.N    R0,??DataTable6_11
   \   0000021E   0x6800             LDR      R0,[R0, #+0]
   \   00000220   0x2800             CMP      R0,#+0
   \   00000222   0xD036             BEQ.N    ??ShooterGame_6
    539                {
    540                  u16 i = 0;
   \   00000224   0x2400             MOVS     R4,#+0
    541                  if (reload % 10 == 0)
   \   00000226   0x200A             MOVS     R0,#+10
   \   00000228   0x....             LDR.N    R1,??DataTable6_11
   \   0000022A   0x6809             LDR      R1,[R1, #+0]
   \   0000022C   0x....             LDR.N    R2,??DataTable6_11
   \   0000022E   0x6812             LDR      R2,[R2, #+0]
   \   00000230   0xFBB2 0xF2F0      UDIV     R2,R2,R0
   \   00000234   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   00000238   0x2800             CMP      R0,#+0
   \   0000023A   0xD10A             BNE.N    ??ShooterGame_8
    542                  {
    543                    i = Fire(reload, ybullet, &objt1, &objt2, &objt3);
   \   0000023C   0x....             LDR.N    R0,??DataTable6_10
   \   0000023E   0x9000             STR      R0,[SP, #+0]
   \   00000240   0x....             LDR.N    R3,??DataTable6_7
   \   00000242   0x....             LDR.N    R2,??DataTable6_6
   \   00000244   0x....             LDR.N    R0,??DataTable6_12
   \   00000246   0x8801             LDRH     R1,[R0, #+0]
   \   00000248   0x....             LDR.N    R0,??DataTable6_11
   \   0000024A   0x6800             LDR      R0,[R0, #+0]
   \   0000024C   0x.... 0x....      BL       Fire
   \   00000250   0x0004             MOVS     R4,R0
    544                  }
    545                 
    546                  if (i == 1) 
   \                     ??ShooterGame_8: (+1)
   \   00000252   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000254   0x2C01             CMP      R4,#+1
   \   00000256   0xD108             BNE.N    ??ShooterGame_9
    547                  {
    548                    score += 3;
   \   00000258   0x....             LDR.N    R0,??DataTable6_13
   \   0000025A   0x6800             LDR      R0,[R0, #+0]
   \   0000025C   0x1CC0             ADDS     R0,R0,#+3
   \   0000025E   0x....             LDR.N    R1,??DataTable6_13
   \   00000260   0x6008             STR      R0,[R1, #+0]
    549                    reload = 0;
   \   00000262   0x2000             MOVS     R0,#+0
   \   00000264   0x....             LDR.N    R1,??DataTable6_11
   \   00000266   0x6008             STR      R0,[R1, #+0]
   \   00000268   0xE00A             B.N      ??ShooterGame_10
    550                  }
    551                  else if (i == 2) 
   \                     ??ShooterGame_9: (+1)
   \   0000026A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000026C   0x2C02             CMP      R4,#+2
   \   0000026E   0xD107             BNE.N    ??ShooterGame_10
    552                  {
    553                    score--;
   \   00000270   0x....             LDR.N    R0,??DataTable6_13
   \   00000272   0x6800             LDR      R0,[R0, #+0]
   \   00000274   0x1E40             SUBS     R0,R0,#+1
   \   00000276   0x....             LDR.N    R1,??DataTable6_13
   \   00000278   0x6008             STR      R0,[R1, #+0]
    554                    reload = 0;
   \   0000027A   0x2000             MOVS     R0,#+0
   \   0000027C   0x....             LDR.N    R1,??DataTable6_11
   \   0000027E   0x6008             STR      R0,[R1, #+0]
    555                  }
    556                  if (reload != 0) reload--;
   \                     ??ShooterGame_10: (+1)
   \   00000280   0x....             LDR.N    R0,??DataTable6_11
   \   00000282   0x6800             LDR      R0,[R0, #+0]
   \   00000284   0x2800             CMP      R0,#+0
   \   00000286   0xD004             BEQ.N    ??ShooterGame_6
   \   00000288   0x....             LDR.N    R0,??DataTable6_11
   \   0000028A   0x6800             LDR      R0,[R0, #+0]
   \   0000028C   0x1E40             SUBS     R0,R0,#+1
   \   0000028E   0x....             LDR.N    R1,??DataTable6_11
   \   00000290   0x6008             STR      R0,[R1, #+0]
    557                }
    558              }
    559                
    560              count++;
   \                     ??ShooterGame_6: (+1)
   \   00000292   0x....             LDR.N    R0,??DataTable6_5
   \   00000294   0x6800             LDR      R0,[R0, #+0]
   \   00000296   0x1C40             ADDS     R0,R0,#+1
   \   00000298   0x....             LDR.N    R1,??DataTable6_5
   \   0000029A   0x6008             STR      R0,[R1, #+0]
    561              
    562              // end game after 100000ms or if obstacle reaches left side
    563              if (count > 100000 || objt1.u16PixelColumnAddress == 0 ||objt2.u16PixelColumnAddress == 0 ||objt3.u16PixelColumnAddress == 0 )
   \   0000029C   0x....             LDR.N    R0,??DataTable6_5
   \   0000029E   0x6800             LDR      R0,[R0, #+0]
   \   000002A0   0x....             LDR.N    R1,??DataTable6_14  ;; 0x186a1
   \   000002A2   0x4288             CMP      R0,R1
   \   000002A4   0xD20C             BCS.N    ??ShooterGame_11
   \   000002A6   0x....             LDR.N    R0,??DataTable6_6
   \   000002A8   0x8840             LDRH     R0,[R0, #+2]
   \   000002AA   0x2800             CMP      R0,#+0
   \   000002AC   0xD008             BEQ.N    ??ShooterGame_11
   \   000002AE   0x....             LDR.N    R0,??DataTable6_7
   \   000002B0   0x8840             LDRH     R0,[R0, #+2]
   \   000002B2   0x2800             CMP      R0,#+0
   \   000002B4   0xD004             BEQ.N    ??ShooterGame_11
   \   000002B6   0x....             LDR.N    R0,??DataTable6_10
   \   000002B8   0x8840             LDRH     R0,[R0, #+2]
   \   000002BA   0x2800             CMP      R0,#+0
   \   000002BC   0xF040 0x809F      BNE.W    ??ShooterGame_12
    564              {
    565                LcdClearScreen();
   \                     ??ShooterGame_11: (+1)
   \   000002C0   0x.... 0x....      BL       LcdClearScreen
    566                
    567                if (objt1.u16PixelColumnAddress == 0 ||objt2.u16PixelColumnAddress == 0 ||objt3.u16PixelColumnAddress == 0) 
   \   000002C4   0x....             LDR.N    R0,??DataTable6_6
   \   000002C6   0x8840             LDRH     R0,[R0, #+2]
   \   000002C8   0x2800             CMP      R0,#+0
   \   000002CA   0xD007             BEQ.N    ??ShooterGame_13
   \   000002CC   0x....             LDR.N    R0,??DataTable6_7
   \   000002CE   0x8840             LDRH     R0,[R0, #+2]
   \   000002D0   0x2800             CMP      R0,#+0
   \   000002D2   0xD003             BEQ.N    ??ShooterGame_13
   \   000002D4   0x....             LDR.N    R0,??DataTable6_10
   \   000002D6   0x8840             LDRH     R0,[R0, #+2]
   \   000002D8   0x2800             CMP      R0,#+0
   \   000002DA   0xD11A             BNE.N    ??ShooterGame_14
    568                {
    569                  u8 au8DataContent0[] = "Your Score: 000";
   \                     ??ShooterGame_13: (+1)
   \   000002DC   0xA81C             ADD      R0,SP,#+112
   \   000002DE   0x....             LDR.N    R1,??DataTable6_15
   \   000002E0   0x2210             MOVS     R2,#+16
   \   000002E2   0x.... 0x....      BL       __aeabi_memcpy4
    570                  u8 au8DataContentL[] = "You Lose";
   \   000002E6   0xA80D             ADD      R0,SP,#+52
   \   000002E8   0x....             LDR.N    R1,??DataTable6_16
   \   000002EA   0x2209             MOVS     R2,#+9
   \   000002EC   0x.... 0x....      BL       __aeabi_memcpy
    571                  PixelAddressType loc0 = {5, 0};
   \   000002F0   0x....             LDR.N    R0,??DataTable6_17
   \   000002F2   0x6800             LDR      R0,[R0, #+0]
   \   000002F4   0x9005             STR      R0,[SP, #+20]
    572                  LcdLoadString(au8DataContent0, LCD_FONT_SMALL, &loc0);
   \   000002F6   0xAA05             ADD      R2,SP,#+20
   \   000002F8   0x2100             MOVS     R1,#+0
   \   000002FA   0xA81C             ADD      R0,SP,#+112
   \   000002FC   0x.... 0x....      BL       LcdLoadString
    573                  PixelAddressType locL = {25, 0};
   \   00000300   0x....             LDR.N    R0,??DataTable6_18
   \   00000302   0x6800             LDR      R0,[R0, #+0]
   \   00000304   0x9004             STR      R0,[SP, #+16]
    574                  LcdLoadString(au8DataContentL, LCD_FONT_SMALL, &locL);
   \   00000306   0xAA04             ADD      R2,SP,#+16
   \   00000308   0x2100             MOVS     R1,#+0
   \   0000030A   0xA80D             ADD      R0,SP,#+52
   \   0000030C   0x.... 0x....      BL       LcdLoadString
   \   00000310   0xE043             B.N      ??ShooterGame_15
    575                }
    576                else
    577                {
    578                  if (score < 0) score = 0; 
   \                     ??ShooterGame_14: (+1)
   \   00000312   0x....             LDR.N    R0,??DataTable6_13
   \   00000314   0x6800             LDR      R0,[R0, #+0]
   \   00000316   0x2800             CMP      R0,#+0
   \   00000318   0xD502             BPL.N    ??ShooterGame_16
   \   0000031A   0x2000             MOVS     R0,#+0
   \   0000031C   0x....             LDR.N    R1,??DataTable6_13
   \   0000031E   0x6008             STR      R0,[R1, #+0]
    579                  u8 digit100 = score / 100; 
   \                     ??ShooterGame_16: (+1)
   \   00000320   0x....             LDR.N    R0,??DataTable6_13
   \   00000322   0x6800             LDR      R0,[R0, #+0]
   \   00000324   0x2164             MOVS     R1,#+100
   \   00000326   0xFB90 0xF4F1      SDIV     R4,R0,R1
    580                  u8 digit10  = (score / 10) - (10*digit100);
   \   0000032A   0x....             LDR.N    R0,??DataTable6_13
   \   0000032C   0x6800             LDR      R0,[R0, #+0]
   \   0000032E   0x210A             MOVS     R1,#+10
   \   00000330   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000334   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000336   0x210A             MOVS     R1,#+10
   \   00000338   0xFB01 0x0514      MLS      R5,R1,R4,R0
    581                  u8 digit1   = score % 10;
   \   0000033C   0x200A             MOVS     R0,#+10
   \   0000033E   0x....             LDR.N    R1,??DataTable6_13
   \   00000340   0x6809             LDR      R1,[R1, #+0]
   \   00000342   0x....             LDR.N    R2,??DataTable6_13
   \   00000344   0x6812             LDR      R2,[R2, #+0]
   \   00000346   0xFB92 0xF2F0      SDIV     R2,R2,R0
   \   0000034A   0xFB00 0x1612      MLS      R6,R0,R2,R1
    582                  
    583                  u8 au8DataContent[] = "Your Score:    ";
   \   0000034E   0xA806             ADD      R0,SP,#+24
   \   00000350   0x....             LDR.N    R1,??DataTable6_19
   \   00000352   0x2210             MOVS     R2,#+16
   \   00000354   0x.... 0x....      BL       __aeabi_memcpy4
    584                  au8DataContent[12] = digit100 + 48;
   \   00000358   0xF114 0x0030      ADDS     R0,R4,#+48
   \   0000035C   0xF88D 0x0024      STRB     R0,[SP, #+36]
    585                  au8DataContent[13] = digit10  + 48;
   \   00000360   0xF115 0x0030      ADDS     R0,R5,#+48
   \   00000364   0xF88D 0x0025      STRB     R0,[SP, #+37]
    586                  au8DataContent[14] = digit1  + 48;
   \   00000368   0xF116 0x0030      ADDS     R0,R6,#+48
   \   0000036C   0xF88D 0x0026      STRB     R0,[SP, #+38]
    587                  PixelAddressType loc1 = {5, 0};
   \   00000370   0x....             LDR.N    R0,??DataTable6_20
   \   00000372   0x6800             LDR      R0,[R0, #+0]
   \   00000374   0x9003             STR      R0,[SP, #+12]
    588                  LcdLoadString(au8DataContent, LCD_FONT_SMALL, &loc1);
   \   00000376   0xAA03             ADD      R2,SP,#+12
   \   00000378   0x2100             MOVS     R1,#+0
   \   0000037A   0xA806             ADD      R0,SP,#+24
   \   0000037C   0x.... 0x....      BL       LcdLoadString
    589                  u8 au8DataContentW[] = "You Win!";
   \   00000380   0xA80A             ADD      R0,SP,#+40
   \   00000382   0x....             LDR.N    R1,??DataTable6_21
   \   00000384   0x2209             MOVS     R2,#+9
   \   00000386   0x.... 0x....      BL       __aeabi_memcpy
    590                  PixelAddressType locW = {25, 0};
   \   0000038A   0x....             LDR.N    R0,??DataTable6_22
   \   0000038C   0x6800             LDR      R0,[R0, #+0]
   \   0000038E   0x9002             STR      R0,[SP, #+8]
    591                  LcdLoadString(au8DataContentW, LCD_FONT_SMALL, &locW);
   \   00000390   0xAA02             ADD      R2,SP,#+8
   \   00000392   0x2100             MOVS     R1,#+0
   \   00000394   0xA80A             ADD      R0,SP,#+40
   \   00000396   0x.... 0x....      BL       LcdLoadString
    592                }
    593             
    594                u8 au8DataContent2[] = "Push Button0 to Exit";
   \                     ??ShooterGame_15: (+1)
   \   0000039A   0xA816             ADD      R0,SP,#+88
   \   0000039C   0x....             LDR.N    R1,??DataTable6_23
   \   0000039E   0x2215             MOVS     R2,#+21
   \   000003A0   0x.... 0x....      BL       __aeabi_memcpy
    595                PixelAddressType loc2 = {55, 0};
   \   000003A4   0x....             LDR.N    R0,??DataTable6_24
   \   000003A6   0x6800             LDR      R0,[R0, #+0]
   \   000003A8   0x9001             STR      R0,[SP, #+4]
    596                LcdLoadString(au8DataContent2, LCD_FONT_SMALL, &loc2);
   \   000003AA   0xAA01             ADD      R2,SP,#+4
   \   000003AC   0x2100             MOVS     R1,#+0
   \   000003AE   0xA816             ADD      R0,SP,#+88
   \   000003B0   0x.... 0x....      BL       LcdLoadString
    597                
    598                CapTouchOff();
   \   000003B4   0x.... 0x....      BL       CapTouchOff
    599                PWMAudioOff(BUZZER1);
   \   000003B8   0x2001             MOVS     R0,#+1
   \   000003BA   0x.... 0x....      BL       PWMAudioOff
    600                
    601                count = 0;
   \   000003BE   0x2000             MOVS     R0,#+0
   \   000003C0   0x....             LDR.N    R1,??DataTable6_5
   \   000003C2   0x6008             STR      R0,[R1, #+0]
    602                score = 0; 
   \   000003C4   0x2000             MOVS     R0,#+0
   \   000003C6   0x....             LDR.N    R1,??DataTable6_13
   \   000003C8   0x6008             STR      R0,[R1, #+0]
    603                reload = 0;
   \   000003CA   0x2000             MOVS     R0,#+0
   \   000003CC   0x....             LDR.N    R1,??DataTable6_11
   \   000003CE   0x6008             STR      R0,[R1, #+0]
    604                ybullet = 32;
   \   000003D0   0x2020             MOVS     R0,#+32
   \   000003D2   0x....             LDR.N    R1,??DataTable6_12
   \   000003D4   0x8008             STRH     R0,[R1, #+0]
    605                y = 32;
   \   000003D6   0x2020             MOVS     R0,#+32
   \   000003D8   0x....             LDR.N    R1,??DataTable6_8
   \   000003DA   0x8008             STRH     R0,[R1, #+0]
    606                objt1.u16PixelColumnAddress = 127;
   \   000003DC   0x207F             MOVS     R0,#+127
   \   000003DE   0x....             LDR.N    R1,??DataTable6_6
   \   000003E0   0x8048             STRH     R0,[R1, #+2]
    607                objt2.u16PixelColumnAddress = 125;
   \   000003E2   0x207D             MOVS     R0,#+125
   \   000003E4   0x....             LDR.N    R1,??DataTable6_7
   \   000003E6   0x8048             STRH     R0,[R1, #+2]
    608                objt3.u16PixelColumnAddress = 123;
   \   000003E8   0x207B             MOVS     R0,#+123
   \   000003EA   0x....             LDR.N    R1,??DataTable6_10
   \   000003EC   0x8048             STRH     R0,[R1, #+2]
    609                speed = 500;
   \   000003EE   0xF44F 0x70FA      MOV      R0,#+500
   \   000003F2   0x....             LDR.N    R1,??DataTable6_9
   \   000003F4   0x8008             STRH     R0,[R1, #+0]
    610                
    611                UserApp_StateMachine = GameOver;
   \   000003F6   0x.... 0x....      ADR.W    R0,GameOver
   \   000003FA   0x....             LDR.N    R1,??DataTable6
   \   000003FC   0x6008             STR      R0,[R1, #+0]
    612              }
    613           
    614           
    615            if(IsButtonPressed(BUTTON0))                  // reset game if Button0 is pressed
   \                     ??ShooterGame_12: (+1)
   \   000003FE   0x2000             MOVS     R0,#+0
   \   00000400   0x.... 0x....      BL       IsButtonPressed
   \   00000404   0x2800             CMP      R0,#+0
   \   00000406   0xD032             BEQ.N    ??ShooterGame_17
    616            {
    617              LcdClearScreen();
   \   00000408   0x.... 0x....      BL       LcdClearScreen
    618              u8 au8DataContent[] = "Push Button1 to Play";
   \   0000040C   0xA810             ADD      R0,SP,#+64
   \   0000040E   0x....             LDR.N    R1,??DataTable6_25
   \   00000410   0x2215             MOVS     R2,#+21
   \   00000412   0x.... 0x....      BL       __aeabi_memcpy
    619              PixelAddressType loc1 = {15, 0};
   \   00000416   0x....             LDR.N    R0,??DataTable6_26
   \   00000418   0x6800             LDR      R0,[R0, #+0]
   \   0000041A   0x9000             STR      R0,[SP, #+0]
    620              LcdLoadString(au8DataContent, LCD_FONT_SMALL, &loc1);
   \   0000041C   0xAA00             ADD      R2,SP,#+0
   \   0000041E   0x2100             MOVS     R1,#+0
   \   00000420   0xA810             ADD      R0,SP,#+64
   \   00000422   0x.... 0x....      BL       LcdLoadString
    621              CapTouchOff();
   \   00000426   0x.... 0x....      BL       CapTouchOff
    622              PWMAudioOff(BUZZER1);
   \   0000042A   0x2001             MOVS     R0,#+1
   \   0000042C   0x.... 0x....      BL       PWMAudioOff
    623          
    624              count = 0;
   \   00000430   0x2000             MOVS     R0,#+0
   \   00000432   0x....             LDR.N    R1,??DataTable6_5
   \   00000434   0x6008             STR      R0,[R1, #+0]
    625              score = 0; 
   \   00000436   0x2000             MOVS     R0,#+0
   \   00000438   0x....             LDR.N    R1,??DataTable6_13
   \   0000043A   0x6008             STR      R0,[R1, #+0]
    626              reload = 0;
   \   0000043C   0x2000             MOVS     R0,#+0
   \   0000043E   0x....             LDR.N    R1,??DataTable6_11
   \   00000440   0x6008             STR      R0,[R1, #+0]
    627              ybullet = 32;
   \   00000442   0x2020             MOVS     R0,#+32
   \   00000444   0x....             LDR.N    R1,??DataTable6_12
   \   00000446   0x8008             STRH     R0,[R1, #+0]
    628              y = 32;
   \   00000448   0x2020             MOVS     R0,#+32
   \   0000044A   0x....             LDR.N    R1,??DataTable6_8
   \   0000044C   0x8008             STRH     R0,[R1, #+0]
    629              objt1.u16PixelColumnAddress = 127;
   \   0000044E   0x207F             MOVS     R0,#+127
   \   00000450   0x....             LDR.N    R1,??DataTable6_6
   \   00000452   0x8048             STRH     R0,[R1, #+2]
    630              objt2.u16PixelColumnAddress = 125;
   \   00000454   0x207D             MOVS     R0,#+125
   \   00000456   0x....             LDR.N    R1,??DataTable6_7
   \   00000458   0x8048             STRH     R0,[R1, #+2]
    631              objt3.u16PixelColumnAddress = 123;
   \   0000045A   0x207B             MOVS     R0,#+123
   \   0000045C   0x....             LDR.N    R1,??DataTable6_10
   \   0000045E   0x8048             STRH     R0,[R1, #+2]
    632              speed = 500;
   \   00000460   0xF44F 0x70FA      MOV      R0,#+500
   \   00000464   0x....             LDR.N    R1,??DataTable6_9
   \   00000466   0x8008             STRH     R0,[R1, #+0]
    633              
    634              UserApp_StateMachine = Menu;
   \   00000468   0x....             LDR.N    R0,??DataTable6_27
   \   0000046A   0x....             LDR.N    R1,??DataTable6
   \   0000046C   0x6008             STR      R0,[R1, #+0]
    635            }
    636            
    637          }
   \                     ??ShooterGame_17: (+1)
   \   0000046E   0xB020             ADD      SP,SP,#+128
   \   00000470   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??count:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??score:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??reload:
   \   00000000                      DS8 4

   \                                 In section .data, align 2
   \                     ??ybullet:
   \   00000000   0x0020             DC16 32

   \                                 In section .data, align 2
   \                     ??y:
   \   00000000   0x0020             DC16 32

   \                                 In section .data, align 4
   \                     ??objt1:
   \   00000000   0x0020 0x007F      DC16 32, 127

   \                                 In section .data, align 4
   \                     ??objt2:
   \   00000000   0x002A 0x007D      DC16 42, 125

   \                                 In section .data, align 4
   \                     ??objt3:
   \   00000000   0x0016 0x007B      DC16 22, 123

   \                                 In section .data, align 2
   \                     ??speed:
   \   00000000   0x01F4             DC16 500
    638          

   \                                 In section .text, align 4, keep-with-next
    639          static void GameOver(void)
    640          {
   \                     GameOver: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    641            if(IsButtonPressed(BUTTON0))
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       IsButtonPressed
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD002             BEQ.N    ??GameOver_0
    642            {
    643              UserApp_StateMachine = Menu;
   \   0000000C   0x....             LDR.N    R0,??DataTable6_27
   \   0000000E   0x....             LDR.N    R1,??DataTable6
   \   00000010   0x6008             STR      R0,[R1, #+0]
    644            } 
    645          } /* end GameOver() */
   \                     ??GameOver_0: (+1)
   \   00000012   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     UserApp_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     ??count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     ??objt1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     ??objt2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     ??y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     ??speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x........         DC32     ??objt3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x........         DC32     ??reload

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x........         DC32     ??ybullet

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x........         DC32     ??score

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x000186A1         DC32     0x186a1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_19:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_20:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_21:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_22:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_23:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_24:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_25:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_26:
   \   00000000   0x........         DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_27:
   \   00000000   0x........         DC32     Menu

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x50 0x75          DC8 "Push Button1 to Play"
   \              0x73 0x68    
   \              0x20 0x42    
   \              0x75 0x74    
   \              0x74 0x6F    
   \              0x6E 0x31    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x50 0x6C    
   \              0x61 0x79    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x000F 0x0000      DC16 15, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x0000 0x0008      DC16 0, 8

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x0000 0x0002      DC16 0, 2

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x59 0x6F          DC8 "Your Score: 000"
   \              0x75 0x72    
   \              0x20 0x53    
   \              0x63 0x6F    
   \              0x72 0x65    
   \              0x3A 0x20    
   \              0x30 0x30    
   \              0x30 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x59 0x6F          DC8 "You Lose"
   \              0x75 0x20    
   \              0x4C 0x6F    
   \              0x73 0x65    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x0005 0x0000      DC16 5, 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x0019 0x0000      DC16 25, 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x59 0x6F          DC8 "Your Score:    "
   \              0x75 0x72    
   \              0x20 0x53    
   \              0x63 0x6F    
   \              0x72 0x65    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x0005 0x0000      DC16 5, 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x59 0x6F          DC8 "You Win!"
   \              0x75 0x20    
   \              0x57 0x69    
   \              0x6E 0x21    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x0019 0x0000      DC16 25, 0

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x50 0x75          DC8 "Push Button0 to Exit"
   \              0x73 0x68    
   \              0x20 0x42    
   \              0x75 0x74    
   \              0x74 0x6F    
   \              0x6E 0x30    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x45 0x78    
   \              0x69 0x74    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x0037 0x0000      DC16 55, 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x50 0x75          DC8 "Push Button1 to Play"
   \              0x73 0x68    
   \              0x20 0x42    
   \              0x75 0x74    
   \              0x74 0x6F    
   \              0x6E 0x31    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x50 0x6C    
   \              0x61 0x79    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x000F 0x0000      DC16 15, 0
    646          
    647          
    648          /*-------------------------------------------------------------------------------------------------------------------*/
    649          /* Handle an error */
    650          static void UserAppSM_Error(void)          
                             ^
Warning[Pe177]: function "UserAppSM_Error" was declared but never referenced

  static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
             ^
"C:\Users\Jonathan\Desktop\MPG - User\firmware_mpg_common\application\user_app.c",61  Warning[Pe177]: 
          variable "UserApp_u32Timeout" was declared but never referenced
    651          {
    652            UserApp_StateMachine = Menu;  
    653          } /* end UserAppSM_Error() */
    654          
    655          
    656          /*-------------------------------------------------------------------------------------------------------------------*/
    657          /* State to sit in if init failed */
    658          static void UserAppSM_FailedInit(void)          
    659          {
    660              
    661          } /* end UserAppSM_FailedInit() */
    662          
    663          
    664          /*--------------------------------------------------------------------------------------------------------------------*/
    665          /* End of File                                                                                                        */
    666          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   CenterGun
        16   -> LcdClearPixel
        16   -> LcdSetPixel
      32   Fire
        32   -> LcdClearPixel
        32   -> LcdSetPixel
        32   -> PlaceObjectR
       8   GameOver
         8   -> IsButtonPressed
       8   Mary
         8   -> PWMAudioOff
         8   -> PWMAudioOn
         8   -> PWMAudioSetFrequency
       8   Menu
         8   -> ButtonAcknowledge
         8   -> CapTouchOn
         8   -> CenterGun
         8   -> LcdClearScreen
         8   -> WasButtonPressed
       8   PlaceObject
         8   -> LcdSetPixel
       8   PlaceObjectR
         8   -> LcdSetPixel
         8   -> rand
     144   ShooterGame
       144   -> CapTouchOff
       144   -> CaptouchCurrentVSlidePosition
       144   -> CenterGun
       144   -> Fire
       144   -> IsButtonPressed
       144   -> LcdClearPixel
       144   -> LcdClearScreen
       144   -> LcdLoadString
       144   -> PWMAudioOff
       144   -> PlaceObject
       144   -> PlaceObjectR
       144   -> __aeabi_memcpy
       144   -> __aeabi_memcpy4
      32   UserAppInitialize
        32   -> LcdClearScreen
        32   -> LcdLoadString
        32   -> LedOff
        32   -> __aeabi_memcpy
       8   UserAppRunActiveState
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_21
       4  ??DataTable6_22
       4  ??DataTable6_23
       4  ??DataTable6_24
       4  ??DataTable6_25
       4  ??DataTable6_26
       4  ??DataTable6_27
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      24  ?_0
       4  ?_1
      12  ?_10
       4  ?_11
      24  ?_12
       4  ?_13
      24  ?_14
       4  ?_15
       4  ?_2
       4  ?_3
      16  ?_4
      12  ?_5
       4  ?_6
       4  ?_7
      16  ?_8
       4  ?_9
     276  CenterGun
     412  Fire
       4  G_u32UserAppFlags
      20  GameOver
     806  Mary
      44  Menu
      42  PlaceObject
      60  PlaceObjectR
    1138  ShooterGame
     124  UserAppInitialize
      12  UserAppRunActiveState
       4  UserApp_StateMachine
       4  count
       4  objt1
       4  objt2
       4  objt3
       4  reload
       4  score
       2  speed
       2  y
       2  ybullet

 
    20 bytes in section .bss
    18 bytes in section .data
   164 bytes in section .rodata
 3 046 bytes in section .text
 
 3 046 bytes of CODE  memory
   164 bytes of CONST memory
    38 bytes of DATA  memory

Errors: none
Warnings: 3
