###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        25/Apr/2016  11:40:06
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Jonathan\Desktop\Shooter
#        Game\firmware_mpg_common\application\shooter-game.c
#    Command line =  
#        "C:\Users\Jonathan\Desktop\Shooter
#        Game\firmware_mpg_common\application\shooter-game.c" -D MPGL2
#        --preprocess=cl "C:\Users\Jonathan\Desktop\Shooter
#        Game\firmware_mpgl2\iar_7_20_1\Debug\List\" -lC
#        "C:\Users\Jonathan\Desktop\Shooter
#        Game\firmware_mpgl2\iar_7_20_1\Debug\List\" -o
#        "C:\Users\Jonathan\Desktop\Shooter
#        Game\firmware_mpgl2\iar_7_20_1\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\Jonathan\Desktop\Shooter Game\firmware_mpgl2\iar_7_20_1\" -I
#        "C:\Users\Jonathan\Desktop\Shooter
#        Game\firmware_mpgl2\iar_7_20_1\..\bsp\" -I
#        "C:\Users\Jonathan\Desktop\Shooter
#        Game\firmware_mpgl2\iar_7_20_1\..\drivers\" -I
#        "C:\Users\Jonathan\Desktop\Shooter
#        Game\firmware_mpgl2\iar_7_20_1\..\application\" -I
#        "C:\Users\Jonathan\Desktop\Shooter
#        Game\firmware_mpgl2\iar_7_20_1\..\libraries\captouch\" -I
#        "C:\Users\Jonathan\Desktop\Shooter
#        Game\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\" -I
#        "C:\Users\Jonathan\Desktop\Shooter
#        Game\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\application\"
#        -I "C:\Users\Jonathan\Desktop\Shooter
#        Game\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\cmsis\" -I
#        "C:\Users\Jonathan\Desktop\Shooter
#        Game\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\drivers\" -On
#        --use_c++_inline --require_prototypes -I "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\Jonathan\Desktop\Shooter
#        Game\firmware_mpgl2\iar_7_20_1\Debug\List\shooter-game.lst
#    Object file  =  
#        C:\Users\Jonathan\Desktop\Shooter
#        Game\firmware_mpgl2\iar_7_20_1\Debug\Obj\shooter-game.o
#
###############################################################################

C:\Users\Jonathan\Desktop\Shooter Game\firmware_mpg_common\application\shooter-game.c
      1          /**********************************************************************************************************************
      2          File: shooter-game.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          
      6          ----------------------------------------------------------------------------------------------------------------------
      7          
      8          Description:
      9          This is a shooter-game.c file template 
     10          This application is called "Pixel Shooter". It is a game where the user controls the gun on the left side of the screen
     11          using the verticle captouch sliders and fire the gun at the incoming pixel blocks using button1.
     12          
     13          ------------------------------------------------------------------------------------------------------------------------
     14          API:
     15          
     16          Public functions:
     17          
     18          
     19          Protected System functions:
     20          void ShooterGameInitialize(void)
     21          Runs required initialzation for the task.  Should only be called once in main init section.
     22          
     23          void ShooterGameRunActiveState(void)
     24          Runs current task state.  Should only be called once in main loop.
     25          
     26          
     27          **********************************************************************************************************************/
     28          
     29          #include "configuration.h"

  //  ----------------------------------------------------------------------------
                                                                                 ^
"C:\Users\Jonathan\Desktop\Shooter Game\firmware_mpg_common\AT91SAM3U4.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)
     30          
     31          /***********************************************************************************************************************
     32          Global variable definitions with scope across entire project.
     33          All Global variable names shall start with "G_"
     34          ***********************************************************************************************************************/
     35          /* New variables */

   \                                 In section .bss, align 4
     36          volatile u32 G_u32ShooterGameFlags;                       /* Global state flags */
   \                     G_u32ShooterGameFlags:
   \   00000000                      DS8 4
     37          
     38          
     39          /*--------------------------------------------------------------------------------------------------------------------*/
     40          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     41          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     42          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     43          
     44          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     45          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     46          
     47          
     48          /***********************************************************************************************************************
     49          Global variable definitions with scope limited to this local application.
     50          Variable names shall start with "ShooterGame_" and be declared as static.
     51          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     52          static fnCode_type ShooterGame_StateMachine;            /* The state machine function pointer */
   \                     ShooterGame_StateMachine:
   \   00000000                      DS8 4
     53          static u32 ShooterGame_u32Timeout;                      /* Timeout counter used across states */
     54          
     55          
     56          /**********************************************************************************************************************
     57          Function Definitions
     58          **********************************************************************************************************************/
     59          
     60          /*--------------------------------------------------------------------------------------------------------------------*/
     61          /* Public functions                                                                                                   */
     62          /*--------------------------------------------------------------------------------------------------------------------*/
     63          
     64          
     65          /*--------------------------------------------------------------------------------------------------------------------*/
     66          /* Protected functions                                                                                                */
     67          /*--------------------------------------------------------------------------------------------------------------------*/
     68          
     69          /*--------------------------------------------------------------------------------------------------------------------
     70          Function: ShooterGameInitialize
     71          
     72          Description:
     73          Initializes the State Machine and its variables.
     74          Displays the opening message
     75          */

   \                                 In section .text, align 2, keep-with-next
     76          void ShooterGameInitialize(void)
     77          {
   \                     ShooterGameInitialize: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     78            
     79            /* If good initialization, set state to Idle */
     80            if( 1 /* Add condition for good init */)
     81            {
     82              ShooterGame_StateMachine = Menu;
   \   00000004   0x.... 0x....      ADR.W    R0,Menu
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable6
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     83            }
     84            else
     85            {
     86              /* The task isn't properly initialized, so shut it down and don't run */
     87              ShooterGame_StateMachine = ShooterGameSM_FailedInit;
     88            }
     89            
     90            /* Display opening message */
     91            LcdClearScreen();
   \   0000000E   0x.... 0x....      BL       LcdClearScreen
     92            u8 au8DataContent[] = "Push Button1 to Play";
   \   00000012   0xA801             ADD      R0,SP,#+4
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable6_1
   \   00000018   0x2215             MOVS     R2,#+21
   \   0000001A   0x.... 0x....      BL       __aeabi_memcpy
     93            PixelAddressType loc1 = {15, 0};
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x9000             STR      R0,[SP, #+0]
     94            LcdLoadString(au8DataContent, LCD_FONT_SMALL, &loc1);
   \   00000026   0xAA00             ADD      R2,SP,#+0
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xA801             ADD      R0,SP,#+4
   \   0000002C   0x.... 0x....      BL       LcdLoadString
     95            
     96            LedOff(RED0);
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      BL       LedOff
     97            LedOff(RED1);
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      BL       LedOff
     98            LedOff(RED2);
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x.... 0x....      BL       LedOff
     99            LedOff(RED3);
   \   00000042   0x2003             MOVS     R0,#+3
   \   00000044   0x.... 0x....      BL       LedOff
    100            LedOff(BLUE0);
   \   00000048   0x2008             MOVS     R0,#+8
   \   0000004A   0x.... 0x....      BL       LedOff
    101            LedOff(BLUE1);
   \   0000004E   0x2009             MOVS     R0,#+9
   \   00000050   0x.... 0x....      BL       LedOff
    102            LedOff(BLUE2);
   \   00000054   0x200A             MOVS     R0,#+10
   \   00000056   0x.... 0x....      BL       LedOff
    103            LedOff(BLUE3);
   \   0000005A   0x200B             MOVS     R0,#+11
   \   0000005C   0x.... 0x....      BL       LedOff
    104            LedOff(GREEN0);
   \   00000060   0x2004             MOVS     R0,#+4
   \   00000062   0x.... 0x....      BL       LedOff
    105            LedOff(GREEN1);
   \   00000066   0x2005             MOVS     R0,#+5
   \   00000068   0x.... 0x....      BL       LedOff
    106            LedOff(GREEN2);
   \   0000006C   0x2006             MOVS     R0,#+6
   \   0000006E   0x.... 0x....      BL       LedOff
    107            LedOff(GREEN3);
   \   00000072   0x2007             MOVS     R0,#+7
   \   00000074   0x.... 0x....      BL       LedOff
    108            
    109            
    110          } /* end ShooterGameInitialize() */
   \   00000078   0xB007             ADD      SP,SP,#+28
   \   0000007A   0xBD00             POP      {PC}             ;; return
    111          
    112          
    113          /*----------------------------------------------------------------------------------------------------------------------
    114          Function ShooterGameRunActiveState()
    115          
    116          Description:
    117          Selects and runs one iteration of the current state in the state machine.
    118          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    119          may take 1ms / n to execute.
    120          
    121          Requires:
    122          - State machine function pointer points at current state
    123          
    124          Promises:
    125          - Calls the function to pointed by the state machine function pointer
    126          */

   \                                 In section .text, align 2, keep-with-next
    127          void ShooterGameRunActiveState(void)
    128          {
   \                     ShooterGameRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    129            ShooterGame_StateMachine();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable6
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x4780             BLX      R0
    130          } /* end ShooterGameRunActiveState */
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    131          
    132          
    133          /*--------------------------------------------------------------------------------------------------------------------*/
    134          /* Private functions                                                                                                  */
    135          /*--------------------------------------------------------------------------------------------------------------------*/
    136          
    137          /*--------------------------------------------------------------------------------------------------------------------
    138          Function: PlaceObjectR
    139          Description: Places a 3x1 pixel block at a random verticle position at the object's PixelColumnAddress
    140          */

   \                                 In section .text, align 2, keep-with-next
    141          void PlaceObjectR (PixelAddressType* object)
    142          {
   \                     PlaceObjectR: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    143            object->u16PixelRowAddress = rand() % 63 + 1;
   \   00000004   0x.... 0x....      BL       rand
   \   00000008   0x213F             MOVS     R1,#+63
   \   0000000A   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000000E   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x8020             STRH     R0,[R4, #+0]
    144            LcdSetPixel(object); 
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       LcdSetPixel
    145            object->u16PixelRowAddress++;
   \   0000001C   0x8820             LDRH     R0,[R4, #+0]
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x8020             STRH     R0,[R4, #+0]
    146            LcdSetPixel(object); 
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       LcdSetPixel
    147            object->u16PixelRowAddress -= 2;
   \   00000028   0x8820             LDRH     R0,[R4, #+0]
   \   0000002A   0x1E80             SUBS     R0,R0,#+2
   \   0000002C   0x8020             STRH     R0,[R4, #+0]
    148            LcdSetPixel(object); 
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       LcdSetPixel
    149            object->u16PixelRowAddress++;
   \   00000034   0x8820             LDRH     R0,[R4, #+0]
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0x8020             STRH     R0,[R4, #+0]
    150          }
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return
    151          
    152          /*--------------------------------------------------------------------------------------------------------------------
    153          Function: PlaceObjectR
    154          Description: Places a 3x1 pixel block at the object's position
    155          */

   \                                 In section .text, align 2, keep-with-next
    156          void PlaceObject (PixelAddressType* object)
    157          {
   \                     PlaceObject: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    158            LcdSetPixel(object); 
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       LcdSetPixel
    159            object->u16PixelRowAddress++;
   \   0000000A   0x8820             LDRH     R0,[R4, #+0]
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \   0000000E   0x8020             STRH     R0,[R4, #+0]
    160            LcdSetPixel(object); 
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       LcdSetPixel
    161            object->u16PixelRowAddress -= 2;
   \   00000016   0x8820             LDRH     R0,[R4, #+0]
   \   00000018   0x1E80             SUBS     R0,R0,#+2
   \   0000001A   0x8020             STRH     R0,[R4, #+0]
    162            LcdSetPixel(object); 
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       LcdSetPixel
    163            object->u16PixelRowAddress++;
   \   00000022   0x8820             LDRH     R0,[R4, #+0]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x8020             STRH     R0,[R4, #+0]
    164          }
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    165          
    166          /*--------------------------------------------------------------------------------------------------------------------
    167          Function: Fire
    168          Description: Fires the gun by moving and removing the pixel bullet appropriately. This function is to be called in 
    169          each iteration when a bullet is in motion.
    170          */

   \                                 In section .text, align 2, keep-with-next
    171          u16 Fire(u32 c, u16 y, PixelAddressType* object, PixelAddressType* object2, PixelAddressType* object3)
    172          {
   \                     Fire: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8020      LDR      R8,[SP, #+32]
    173            PixelAddressType bullet = {y,8};
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0xF8AD 0x5000      STRH     R5,[SP, #+0]
    174            bullet.u16PixelColumnAddress += (1200 - c) / 10;
   \   0000001E   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000022   0xF5D4 0x6196      RSBS     R1,R4,#+1200
   \   00000026   0x220A             MOVS     R2,#+10
   \   00000028   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   0000002C   0x1808             ADDS     R0,R1,R0
   \   0000002E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    175            
    176            LcdClearPixel(&bullet);             // remove bullet from present location
   \   00000032   0xA800             ADD      R0,SP,#+0
   \   00000034   0x.... 0x....      BL       LcdClearPixel
    177            bullet.u16PixelColumnAddress++;     // update the bullet's location to one pixel to the right
   \   00000038   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    178            
    179            /**
    180            There are five cases:
    181            1. The bullet hits object1: returns 1
    182            2. The bullet hits object2: returns 1
    183            3. The bullet hits object3: returns 1
    184            4. The bullet misses (reaches the right end of the screen): returns 2
    185            5. The bullet is travelling: returns 0
    186            */
    187            
    188            /* target1 hit */
    189            if (   bullet.u16PixelColumnAddress >= object->u16PixelColumnAddress - 1          
    190                && bullet.u16PixelColumnAddress <= object->u16PixelColumnAddress + 1
    191                  && bullet.u16PixelRowAddress >= object->u16PixelRowAddress - 1 
    192                    && bullet.u16PixelRowAddress <= object->u16PixelRowAddress + 1)
   \   00000042   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000046   0x8871             LDRH     R1,[R6, #+2]
   \   00000048   0x1E49             SUBS     R1,R1,#+1
   \   0000004A   0x4288             CMP      R0,R1
   \   0000004C   0xDB2A             BLT.N    ??Fire_0
   \   0000004E   0x8870             LDRH     R0,[R6, #+2]
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \   00000052   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000056   0x4288             CMP      R0,R1
   \   00000058   0xDB24             BLT.N    ??Fire_0
   \   0000005A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000005E   0x8831             LDRH     R1,[R6, #+0]
   \   00000060   0x1E49             SUBS     R1,R1,#+1
   \   00000062   0x4288             CMP      R0,R1
   \   00000064   0xDB1E             BLT.N    ??Fire_0
   \   00000066   0x8830             LDRH     R0,[R6, #+0]
   \   00000068   0x1C40             ADDS     R0,R0,#+1
   \   0000006A   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000006E   0x4288             CMP      R0,R1
   \   00000070   0xDB18             BLT.N    ??Fire_0
    193            {
    194              LcdClearPixel(object);                 // remove target
   \   00000072   0x0030             MOVS     R0,R6
   \   00000074   0x.... 0x....      BL       LcdClearPixel
    195              object->u16PixelRowAddress++;
   \   00000078   0x8830             LDRH     R0,[R6, #+0]
   \   0000007A   0x1C40             ADDS     R0,R0,#+1
   \   0000007C   0x8030             STRH     R0,[R6, #+0]
    196              LcdClearPixel(object);
   \   0000007E   0x0030             MOVS     R0,R6
   \   00000080   0x.... 0x....      BL       LcdClearPixel
    197              object->u16PixelRowAddress -= 2;
   \   00000084   0x8830             LDRH     R0,[R6, #+0]
   \   00000086   0x1E80             SUBS     R0,R0,#+2
   \   00000088   0x8030             STRH     R0,[R6, #+0]
    198              LcdClearPixel(object);
   \   0000008A   0x0030             MOVS     R0,R6
   \   0000008C   0x.... 0x....      BL       LcdClearPixel
    199              object->u16PixelRowAddress++;
   \   00000090   0x8830             LDRH     R0,[R6, #+0]
   \   00000092   0x1C40             ADDS     R0,R0,#+1
   \   00000094   0x8030             STRH     R0,[R6, #+0]
    200              object->u16PixelColumnAddress = 127;
   \   00000096   0x207F             MOVS     R0,#+127
   \   00000098   0x8070             STRH     R0,[R6, #+2]
    201              PlaceObjectR(object);                  // add new target
   \   0000009A   0x0030             MOVS     R0,R6
   \   0000009C   0x.... 0x....      BL       PlaceObjectR
    202              return 1;
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0xE076             B.N      ??Fire_1
    203            }
    204            /* target2 hit */
    205            else if (bullet.u16PixelColumnAddress >= object2->u16PixelColumnAddress - 1        
    206                     && bullet.u16PixelColumnAddress <= object2->u16PixelColumnAddress + 1
    207                       && bullet.u16PixelRowAddress >= object2->u16PixelRowAddress - 1 
    208                         && bullet.u16PixelRowAddress <= object2->u16PixelRowAddress + 1)
   \                     ??Fire_0: (+1)
   \   000000A4   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   000000A8   0x8879             LDRH     R1,[R7, #+2]
   \   000000AA   0x1E49             SUBS     R1,R1,#+1
   \   000000AC   0x4288             CMP      R0,R1
   \   000000AE   0xDB2A             BLT.N    ??Fire_2
   \   000000B0   0x8878             LDRH     R0,[R7, #+2]
   \   000000B2   0x1C40             ADDS     R0,R0,#+1
   \   000000B4   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   000000B8   0x4288             CMP      R0,R1
   \   000000BA   0xDB24             BLT.N    ??Fire_2
   \   000000BC   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000000C0   0x8839             LDRH     R1,[R7, #+0]
   \   000000C2   0x1E49             SUBS     R1,R1,#+1
   \   000000C4   0x4288             CMP      R0,R1
   \   000000C6   0xDB1E             BLT.N    ??Fire_2
   \   000000C8   0x8838             LDRH     R0,[R7, #+0]
   \   000000CA   0x1C40             ADDS     R0,R0,#+1
   \   000000CC   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   000000D0   0x4288             CMP      R0,R1
   \   000000D2   0xDB18             BLT.N    ??Fire_2
    209            {
    210              LcdClearPixel(object2);                 // remove target
   \   000000D4   0x0038             MOVS     R0,R7
   \   000000D6   0x.... 0x....      BL       LcdClearPixel
    211              object2->u16PixelRowAddress++;
   \   000000DA   0x8838             LDRH     R0,[R7, #+0]
   \   000000DC   0x1C40             ADDS     R0,R0,#+1
   \   000000DE   0x8038             STRH     R0,[R7, #+0]
    212              LcdClearPixel(object2);
   \   000000E0   0x0038             MOVS     R0,R7
   \   000000E2   0x.... 0x....      BL       LcdClearPixel
    213              object2->u16PixelRowAddress -= 2;
   \   000000E6   0x8838             LDRH     R0,[R7, #+0]
   \   000000E8   0x1E80             SUBS     R0,R0,#+2
   \   000000EA   0x8038             STRH     R0,[R7, #+0]
    214              LcdClearPixel(object2);
   \   000000EC   0x0038             MOVS     R0,R7
   \   000000EE   0x.... 0x....      BL       LcdClearPixel
    215              object2->u16PixelRowAddress++;
   \   000000F2   0x8838             LDRH     R0,[R7, #+0]
   \   000000F4   0x1C40             ADDS     R0,R0,#+1
   \   000000F6   0x8038             STRH     R0,[R7, #+0]
    216              object2->u16PixelColumnAddress = 125;
   \   000000F8   0x207D             MOVS     R0,#+125
   \   000000FA   0x8078             STRH     R0,[R7, #+2]
    217              PlaceObjectR(object2);                  // add new target
   \   000000FC   0x0038             MOVS     R0,R7
   \   000000FE   0x.... 0x....      BL       PlaceObjectR
    218              return 1;
   \   00000102   0x2001             MOVS     R0,#+1
   \   00000104   0xE045             B.N      ??Fire_1
    219            }
    220            /* target3 hit */
    221            else if (bullet.u16PixelColumnAddress >= object3->u16PixelColumnAddress - 1        
    222                     && bullet.u16PixelColumnAddress <= object3->u16PixelColumnAddress + 1
    223                       && bullet.u16PixelRowAddress >= object3->u16PixelRowAddress - 1 
    224                         && bullet.u16PixelRowAddress <= object3->u16PixelRowAddress + 1)
   \                     ??Fire_2: (+1)
   \   00000106   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000010A   0xF8B8 0x1002      LDRH     R1,[R8, #+2]
   \   0000010E   0x1E49             SUBS     R1,R1,#+1
   \   00000110   0x4288             CMP      R0,R1
   \   00000112   0xDB34             BLT.N    ??Fire_3
   \   00000114   0xF8B8 0x0002      LDRH     R0,[R8, #+2]
   \   00000118   0x1C40             ADDS     R0,R0,#+1
   \   0000011A   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   0000011E   0x4288             CMP      R0,R1
   \   00000120   0xDB2D             BLT.N    ??Fire_3
   \   00000122   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000126   0xF8B8 0x1000      LDRH     R1,[R8, #+0]
   \   0000012A   0x1E49             SUBS     R1,R1,#+1
   \   0000012C   0x4288             CMP      R0,R1
   \   0000012E   0xDB26             BLT.N    ??Fire_3
   \   00000130   0xF8B8 0x0000      LDRH     R0,[R8, #+0]
   \   00000134   0x1C40             ADDS     R0,R0,#+1
   \   00000136   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000013A   0x4288             CMP      R0,R1
   \   0000013C   0xDB1F             BLT.N    ??Fire_3
    225            {
    226              LcdClearPixel(object3);                 // remove target
   \   0000013E   0x4640             MOV      R0,R8
   \   00000140   0x.... 0x....      BL       LcdClearPixel
    227              object3->u16PixelRowAddress++;
   \   00000144   0xF8B8 0x0000      LDRH     R0,[R8, #+0]
   \   00000148   0x1C40             ADDS     R0,R0,#+1
   \   0000014A   0xF8A8 0x0000      STRH     R0,[R8, #+0]
    228              LcdClearPixel(object3);
   \   0000014E   0x4640             MOV      R0,R8
   \   00000150   0x.... 0x....      BL       LcdClearPixel
    229              object3->u16PixelRowAddress -= 2;
   \   00000154   0xF8B8 0x0000      LDRH     R0,[R8, #+0]
   \   00000158   0x1E80             SUBS     R0,R0,#+2
   \   0000015A   0xF8A8 0x0000      STRH     R0,[R8, #+0]
    230              LcdClearPixel(object3);
   \   0000015E   0x4640             MOV      R0,R8
   \   00000160   0x.... 0x....      BL       LcdClearPixel
    231              object3->u16PixelRowAddress++;
   \   00000164   0xF8B8 0x0000      LDRH     R0,[R8, #+0]
   \   00000168   0x1C40             ADDS     R0,R0,#+1
   \   0000016A   0xF8A8 0x0000      STRH     R0,[R8, #+0]
    232              object3->u16PixelColumnAddress = 123;
   \   0000016E   0x207B             MOVS     R0,#+123
   \   00000170   0xF8A8 0x0002      STRH     R0,[R8, #+2]
    233              PlaceObjectR(object3);                  // add new target
   \   00000174   0x4640             MOV      R0,R8
   \   00000176   0x.... 0x....      BL       PlaceObjectR
    234              return 1;
   \   0000017A   0x2001             MOVS     R0,#+1
   \   0000017C   0xE009             B.N      ??Fire_1
    235            }
    236            /* target miss */
    237            else if (bullet.u16PixelColumnAddress == 128)                                     
   \                     ??Fire_3: (+1)
   \   0000017E   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000182   0x2880             CMP      R0,#+128
   \   00000184   0xD101             BNE.N    ??Fire_4
    238            {     
    239              return 2;
   \   00000186   0x2002             MOVS     R0,#+2
   \   00000188   0xE003             B.N      ??Fire_1
    240            }
    241            /* bullet is travelling */
    242            else                            
    243            {
    244              LcdSetPixel(&bullet);         // place the bullet at the location one pixel to the right
   \                     ??Fire_4: (+1)
   \   0000018A   0xA800             ADD      R0,SP,#+0
   \   0000018C   0x.... 0x....      BL       LcdSetPixel
    245            }
    246            return 0;
   \   00000190   0x2000             MOVS     R0,#+0
   \                     ??Fire_1: (+1)
   \   00000192   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    247          }
    248          
    249          /*--------------------------------------------------------------------------------------------------------------------
    250          Function: CenterGun
    251          Description: Places the gun at the left side of the screen at the verticle position indicated by the offset argument
    252          */

   \                                 In section .text, align 2, keep-with-next
    253          void CenterGun(u8 offset)
    254          {
   \                     CenterGun: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    255            PixelAddressType gun = {offset + 1, 2};
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x9001             STR      R0,[SP, #+4]
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0x1C60             ADDS     R0,R4,#+1
   \   00000010   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    256            
    257            /* Clears any surrounding pixels from the gun's previous location */
    258            PixelAddressType Clearme = gun;
   \   00000014   0x9801             LDR      R0,[SP, #+4]
   \   00000016   0x9000             STR      R0,[SP, #+0]
    259            Clearme.u16PixelRowAddress++;
   \   00000018   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    260            LcdClearPixel(&Clearme);
   \   00000022   0xA800             ADD      R0,SP,#+0
   \   00000024   0x.... 0x....      BL       LcdClearPixel
    261            Clearme.u16PixelRowAddress -= 4;
   \   00000028   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000002C   0x1F00             SUBS     R0,R0,#+4
   \   0000002E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    262            LcdClearPixel(&Clearme);
   \   00000032   0xA800             ADD      R0,SP,#+0
   \   00000034   0x.... 0x....      BL       LcdClearPixel
    263            Clearme.u16PixelRowAddress++;
   \   00000038   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    264            Clearme.u16PixelColumnAddress++;
   \   00000042   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000046   0x1C40             ADDS     R0,R0,#+1
   \   00000048   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    265            LcdClearPixel(&Clearme);
   \   0000004C   0xA800             ADD      R0,SP,#+0
   \   0000004E   0x.... 0x....      BL       LcdClearPixel
    266            Clearme.u16PixelColumnAddress++;
   \   00000052   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000056   0x1C40             ADDS     R0,R0,#+1
   \   00000058   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    267            LcdClearPixel(&Clearme);
   \   0000005C   0xA800             ADD      R0,SP,#+0
   \   0000005E   0x.... 0x....      BL       LcdClearPixel
    268            Clearme.u16PixelColumnAddress++;
   \   00000062   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    269            LcdClearPixel(&Clearme);
   \   0000006C   0xA800             ADD      R0,SP,#+0
   \   0000006E   0x.... 0x....      BL       LcdClearPixel
    270            Clearme.u16PixelColumnAddress++;
   \   00000072   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000076   0x1C40             ADDS     R0,R0,#+1
   \   00000078   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    271            LcdClearPixel(&Clearme);
   \   0000007C   0xA800             ADD      R0,SP,#+0
   \   0000007E   0x.... 0x....      BL       LcdClearPixel
    272            Clearme.u16PixelRowAddress += 2;
   \   00000082   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000086   0x1C80             ADDS     R0,R0,#+2
   \   00000088   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    273            LcdClearPixel(&Clearme);
   \   0000008C   0xA800             ADD      R0,SP,#+0
   \   0000008E   0x.... 0x....      BL       LcdClearPixel
    274            Clearme.u16PixelColumnAddress--;
   \   00000092   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000096   0x1E40             SUBS     R0,R0,#+1
   \   00000098   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    275            LcdClearPixel(&Clearme);
   \   0000009C   0xA800             ADD      R0,SP,#+0
   \   0000009E   0x.... 0x....      BL       LcdClearPixel
    276            Clearme.u16PixelColumnAddress--;
   \   000000A2   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   000000A6   0x1E40             SUBS     R0,R0,#+1
   \   000000A8   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    277            LcdClearPixel(&Clearme);
   \   000000AC   0xA800             ADD      R0,SP,#+0
   \   000000AE   0x.... 0x....      BL       LcdClearPixel
    278            Clearme.u16PixelColumnAddress--;
   \   000000B2   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   000000B6   0x1E40             SUBS     R0,R0,#+1
   \   000000B8   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    279            LcdClearPixel(&Clearme);
   \   000000BC   0xA800             ADD      R0,SP,#+0
   \   000000BE   0x.... 0x....      BL       LcdClearPixel
    280            
    281            /* Places the gun */
    282            LcdSetPixel(&gun);
   \   000000C2   0xA801             ADD      R0,SP,#+4
   \   000000C4   0x.... 0x....      BL       LcdSetPixel
    283            gun.u16PixelRowAddress = offset-1;
   \   000000C8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000CA   0x1E60             SUBS     R0,R4,#+1
   \   000000CC   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    284            LcdSetPixel(&gun);
   \   000000D0   0xA801             ADD      R0,SP,#+4
   \   000000D2   0x.... 0x....      BL       LcdSetPixel
    285            gun.u16PixelRowAddress = offset;
   \   000000D6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D8   0xF8AD 0x4004      STRH     R4,[SP, #+4]
    286            LcdSetPixel(&gun);
   \   000000DC   0xA801             ADD      R0,SP,#+4
   \   000000DE   0x.... 0x....      BL       LcdSetPixel
    287            gun.u16PixelColumnAddress = 3;
   \   000000E2   0x2003             MOVS     R0,#+3
   \   000000E4   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    288            LcdSetPixel(&gun);
   \   000000E8   0xA801             ADD      R0,SP,#+4
   \   000000EA   0x.... 0x....      BL       LcdSetPixel
    289            gun.u16PixelColumnAddress = 4;
   \   000000EE   0x2004             MOVS     R0,#+4
   \   000000F0   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    290            LcdSetPixel(&gun);
   \   000000F4   0xA801             ADD      R0,SP,#+4
   \   000000F6   0x.... 0x....      BL       LcdSetPixel
    291            gun.u16PixelColumnAddress = 5;
   \   000000FA   0x2005             MOVS     R0,#+5
   \   000000FC   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    292            LcdSetPixel(&gun);
   \   00000100   0xA801             ADD      R0,SP,#+4
   \   00000102   0x.... 0x....      BL       LcdSetPixel
    293            gun.u16PixelColumnAddress = 6;
   \   00000106   0x2006             MOVS     R0,#+6
   \   00000108   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    294            LcdSetPixel(&gun);
   \   0000010C   0xA801             ADD      R0,SP,#+4
   \   0000010E   0x.... 0x....      BL       LcdSetPixel
    295          }
   \   00000112   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    296          
    297          
    298          
    299          /**********************************************************************************************************************
    300          State Machine Function Definitions
    301          **********************************************************************************************************************/
    302          

   \                                 In section .text, align 4, keep-with-next
    303          static void Menu(void)
    304          {
   \                     Menu: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    305            if(WasButtonPressed(BUTTON1))                   // Push button1 to activate game
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       WasButtonPressed
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD00E             BEQ.N    ??Menu_0
    306            { 
    307              ButtonAcknowledge(BUTTON1);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       ButtonAcknowledge
    308              // At the start, clear screen and place gun
    309              LcdClearScreen();
   \   00000012   0x.... 0x....      BL       LcdClearScreen
    310              CenterGun(32);
   \   00000016   0x2020             MOVS     R0,#+32
   \   00000018   0x.... 0x....      BL       CenterGun
    311              CapTouchOn();
   \   0000001C   0x.... 0x....      BL       CapTouchOn
    312              ShooterGame_StateMachine = ShooterGame;
   \   00000020   0x.... 0x....      ADR.W    R0,ShooterGame
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable6
   \   00000028   0x6008             STR      R0,[R1, #+0]
    313            } 
    314          } /* end Menu() */
   \                     ??Menu_0: (+1)
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
    315          

   \                                 In section .text, align 4, keep-with-next
    316          static void ShooterGame(void)
    317          {
   \                     ShooterGame: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0A0             SUB      SP,SP,#+128
    318            static u32 count = 0;  
    319            static int score = 0;
    320            static u32 reload = 0;
    321            static u16 ybullet = 32;
    322            static u16 y = 32;                                          // position of the vertical slider
    323            static PixelAddressType objt1 = {32, 127};                  // obstacle location
    324            static PixelAddressType objt2 = {42, 125};                  // obstacle location
    325            static PixelAddressType objt3 = {22, 123};                  // obstacle location
    326            static u16 speed = 500;
    327            
    328            
    329            if (count == 0)                                             // Set object to destroy at right end of screen
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable6_5
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD107             BNE.N    ??ShooterGame_0
    330            {
    331              PlaceObjectR(&objt1);
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   00000012   0x.... 0x....      BL       PlaceObjectR
    332              PlaceObjectR(&objt2);
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \   0000001A   0x.... 0x....      BL       PlaceObjectR
    333            }
    334            
    335            if (CaptouchCurrentVSlidePosition() < 255/2 - 40 && count % 100 == 0 && y > 0) // Lower y-position if Captouch is down every 100ms
   \                     ??ShooterGame_0: (+1)
   \   0000001E   0x.... 0x....      BL       CaptouchCurrentVSlidePosition
   \   00000022   0x2857             CMP      R0,#+87
   \   00000024   0xDA18             BGE.N    ??ShooterGame_1
   \   00000026   0x2064             MOVS     R0,#+100
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0x.... 0x....      LDR.W    R2,??DataTable6_5
   \   00000032   0x6812             LDR      R2,[R2, #+0]
   \   00000034   0xFBB2 0xF2F0      UDIV     R2,R2,R0
   \   00000038   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD10B             BNE.N    ??ShooterGame_1
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   00000044   0x8800             LDRH     R0,[R0, #+0]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD006             BEQ.N    ??ShooterGame_1
    336            {
    337              y--;
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   0000004E   0x8800             LDRH     R0,[R0, #+0]
   \   00000050   0x1E40             SUBS     R0,R0,#+1
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable6_8
   \   00000056   0x8008             STRH     R0,[R1, #+0]
    338            }
    339            
    340            if (CaptouchCurrentVSlidePosition() > 255/2 + 40 && count % 100 == 0 && y < 62)  // Raise y-position if Captouch is up every 100ms
   \                     ??ShooterGame_1: (+1)
   \   00000058   0x.... 0x....      BL       CaptouchCurrentVSlidePosition
   \   0000005C   0x28A8             CMP      R0,#+168
   \   0000005E   0xDB18             BLT.N    ??ShooterGame_2
   \   00000060   0x2064             MOVS     R0,#+100
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   00000066   0x6809             LDR      R1,[R1, #+0]
   \   00000068   0x.... 0x....      LDR.W    R2,??DataTable6_5
   \   0000006C   0x6812             LDR      R2,[R2, #+0]
   \   0000006E   0xFBB2 0xF2F0      UDIV     R2,R2,R0
   \   00000072   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD10B             BNE.N    ??ShooterGame_2
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   0000007E   0x8800             LDRH     R0,[R0, #+0]
   \   00000080   0x283E             CMP      R0,#+62
   \   00000082   0xDA06             BGE.N    ??ShooterGame_2
    341            {
    342              y++;
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   00000088   0x8800             LDRH     R0,[R0, #+0]
   \   0000008A   0x1C40             ADDS     R0,R0,#+1
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable6_8
   \   00000090   0x8008             STRH     R0,[R1, #+0]
    343            }
    344            
    345            if (count % 100 == 0)
   \                     ??ShooterGame_2: (+1)
   \   00000092   0x2064             MOVS     R0,#+100
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   00000098   0x6809             LDR      R1,[R1, #+0]
   \   0000009A   0x.... 0x....      LDR.W    R2,??DataTable6_5
   \   0000009E   0x6812             LDR      R2,[R2, #+0]
   \   000000A0   0xFBB2 0xF2F0      UDIV     R2,R2,R0
   \   000000A4   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD105             BNE.N    ??ShooterGame_3
    346            {
    347              CenterGun(y);             // Change gun position every 100ms
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   000000B0   0x8800             LDRH     R0,[R0, #+0]
   \   000000B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B4   0x.... 0x....      BL       CenterGun
    348            }
    349            if (count % 1000 == 0 && speed > 90) speed -= 10;
   \                     ??ShooterGame_3: (+1)
   \   000000B8   0xF44F 0x707A      MOV      R0,#+1000
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   000000C0   0x6809             LDR      R1,[R1, #+0]
   \   000000C2   0x.... 0x....      LDR.W    R2,??DataTable6_5
   \   000000C6   0x6812             LDR      R2,[R2, #+0]
   \   000000C8   0xFBB2 0xF2F0      UDIV     R2,R2,R0
   \   000000CC   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   000000D0   0x2800             CMP      R0,#+0
   \   000000D2   0xD10B             BNE.N    ??ShooterGame_4
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable6_9
   \   000000D8   0x8800             LDRH     R0,[R0, #+0]
   \   000000DA   0x285B             CMP      R0,#+91
   \   000000DC   0xDB06             BLT.N    ??ShooterGame_4
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable6_9
   \   000000E2   0x8800             LDRH     R0,[R0, #+0]
   \   000000E4   0x380A             SUBS     R0,R0,#+10
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable6_9
   \   000000EA   0x8008             STRH     R0,[R1, #+0]
    350            
    351            if (count % speed == 0)
   \                     ??ShooterGame_4: (+1)
   \   000000EC   0x.... 0x....      LDR.W    R0,??DataTable6_9
   \   000000F0   0x8800             LDRH     R0,[R0, #+0]
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   000000F6   0x6809             LDR      R1,[R1, #+0]
   \   000000F8   0x.... 0x....      LDR.W    R2,??DataTable6_5
   \   000000FC   0x6812             LDR      R2,[R2, #+0]
   \   000000FE   0xFBB2 0xF2F0      UDIV     R2,R2,R0
   \   00000102   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   00000106   0x2800             CMP      R0,#+0
   \   00000108   0xD172             BNE.N    ??ShooterGame_5
    352            {
    353              // Move objects closer
    354              LcdClearPixel(&objt1);                // remove target
   \   0000010A   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   0000010E   0x.... 0x....      BL       LcdClearPixel
    355              objt1.u16PixelRowAddress++;
   \   00000112   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   00000116   0x8800             LDRH     R0,[R0, #+0]
   \   00000118   0x1C40             ADDS     R0,R0,#+1
   \   0000011A   0x.... 0x....      LDR.W    R1,??DataTable6_6
   \   0000011E   0x8008             STRH     R0,[R1, #+0]
    356              LcdClearPixel(&objt1);
   \   00000120   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   00000124   0x.... 0x....      BL       LcdClearPixel
    357              objt1.u16PixelRowAddress -= 2;
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   0000012C   0x8800             LDRH     R0,[R0, #+0]
   \   0000012E   0x1E80             SUBS     R0,R0,#+2
   \   00000130   0x.... 0x....      LDR.W    R1,??DataTable6_6
   \   00000134   0x8008             STRH     R0,[R1, #+0]
    358              LcdClearPixel(&objt1);
   \   00000136   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   0000013A   0x.... 0x....      BL       LcdClearPixel
    359              objt1.u16PixelRowAddress++;
   \   0000013E   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   00000142   0x8800             LDRH     R0,[R0, #+0]
   \   00000144   0x1C40             ADDS     R0,R0,#+1
   \   00000146   0x.... 0x....      LDR.W    R1,??DataTable6_6
   \   0000014A   0x8008             STRH     R0,[R1, #+0]
    360              objt1.u16PixelColumnAddress--;
   \   0000014C   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   00000150   0x8840             LDRH     R0,[R0, #+2]
   \   00000152   0x1E40             SUBS     R0,R0,#+1
   \   00000154   0x.... 0x....      LDR.W    R1,??DataTable6_6
   \   00000158   0x8048             STRH     R0,[R1, #+2]
    361              PlaceObject(&objt1);                  // add new target
   \   0000015A   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   0000015E   0x.... 0x....      BL       PlaceObject
    362              
    363              LcdClearPixel(&objt2);                // remove target
   \   00000162   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \   00000166   0x.... 0x....      BL       LcdClearPixel
    364              objt2.u16PixelRowAddress++;
   \   0000016A   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \   0000016E   0x8800             LDRH     R0,[R0, #+0]
   \   00000170   0x1C40             ADDS     R0,R0,#+1
   \   00000172   0x.... 0x....      LDR.W    R1,??DataTable6_7
   \   00000176   0x8008             STRH     R0,[R1, #+0]
    365              LcdClearPixel(&objt2);
   \   00000178   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \   0000017C   0x.... 0x....      BL       LcdClearPixel
    366              objt2.u16PixelRowAddress -= 2;
   \   00000180   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \   00000184   0x8800             LDRH     R0,[R0, #+0]
   \   00000186   0x1E80             SUBS     R0,R0,#+2
   \   00000188   0x.... 0x....      LDR.W    R1,??DataTable6_7
   \   0000018C   0x8008             STRH     R0,[R1, #+0]
    367              LcdClearPixel(&objt2);
   \   0000018E   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \   00000192   0x.... 0x....      BL       LcdClearPixel
    368              objt2.u16PixelRowAddress++;
   \   00000196   0x....             LDR.N    R0,??DataTable6_7
   \   00000198   0x8800             LDRH     R0,[R0, #+0]
   \   0000019A   0x1C40             ADDS     R0,R0,#+1
   \   0000019C   0x....             LDR.N    R1,??DataTable6_7
   \   0000019E   0x8008             STRH     R0,[R1, #+0]
    369              objt2.u16PixelColumnAddress--;
   \   000001A0   0x....             LDR.N    R0,??DataTable6_7
   \   000001A2   0x8840             LDRH     R0,[R0, #+2]
   \   000001A4   0x1E40             SUBS     R0,R0,#+1
   \   000001A6   0x....             LDR.N    R1,??DataTable6_7
   \   000001A8   0x8048             STRH     R0,[R1, #+2]
    370              PlaceObject(&objt2);                  // add new target
   \   000001AA   0x....             LDR.N    R0,??DataTable6_7
   \   000001AC   0x.... 0x....      BL       PlaceObject
    371              
    372              LcdClearPixel(&objt3);                // remove target
   \   000001B0   0x....             LDR.N    R0,??DataTable6_10
   \   000001B2   0x.... 0x....      BL       LcdClearPixel
    373              objt3.u16PixelRowAddress++;
   \   000001B6   0x....             LDR.N    R0,??DataTable6_10
   \   000001B8   0x8800             LDRH     R0,[R0, #+0]
   \   000001BA   0x1C40             ADDS     R0,R0,#+1
   \   000001BC   0x....             LDR.N    R1,??DataTable6_10
   \   000001BE   0x8008             STRH     R0,[R1, #+0]
    374              LcdClearPixel(&objt3);
   \   000001C0   0x....             LDR.N    R0,??DataTable6_10
   \   000001C2   0x.... 0x....      BL       LcdClearPixel
    375              objt3.u16PixelRowAddress -= 2;
   \   000001C6   0x....             LDR.N    R0,??DataTable6_10
   \   000001C8   0x8800             LDRH     R0,[R0, #+0]
   \   000001CA   0x1E80             SUBS     R0,R0,#+2
   \   000001CC   0x....             LDR.N    R1,??DataTable6_10
   \   000001CE   0x8008             STRH     R0,[R1, #+0]
    376              LcdClearPixel(&objt3);
   \   000001D0   0x....             LDR.N    R0,??DataTable6_10
   \   000001D2   0x.... 0x....      BL       LcdClearPixel
    377              objt3.u16PixelRowAddress++;
   \   000001D6   0x....             LDR.N    R0,??DataTable6_10
   \   000001D8   0x8800             LDRH     R0,[R0, #+0]
   \   000001DA   0x1C40             ADDS     R0,R0,#+1
   \   000001DC   0x....             LDR.N    R1,??DataTable6_10
   \   000001DE   0x8008             STRH     R0,[R1, #+0]
    378              objt3.u16PixelColumnAddress--;
   \   000001E0   0x....             LDR.N    R0,??DataTable6_10
   \   000001E2   0x8840             LDRH     R0,[R0, #+2]
   \   000001E4   0x1E40             SUBS     R0,R0,#+1
   \   000001E6   0x....             LDR.N    R1,??DataTable6_10
   \   000001E8   0x8048             STRH     R0,[R1, #+2]
    379              PlaceObject(&objt3);                  // add new target
   \   000001EA   0x....             LDR.N    R0,??DataTable6_10
   \   000001EC   0x.... 0x....      BL       PlaceObject
    380            }
    381            
    382            if (count > 600)
   \                     ??ShooterGame_5: (+1)
   \   000001F0   0x....             LDR.N    R0,??DataTable6_5
   \   000001F2   0x6800             LDR      R0,[R0, #+0]
   \   000001F4   0xF5B0 0x7F16      CMP      R0,#+600
   \   000001F8   0xD94B             BLS.N    ??ShooterGame_6
    383            {
    384              if (IsButtonPressed(BUTTON1) && reload == 0)     // Fires a bullet if button1 is pushed and gun is reloaded
   \   000001FA   0x2001             MOVS     R0,#+1
   \   000001FC   0x.... 0x....      BL       IsButtonPressed
   \   00000200   0x2800             CMP      R0,#+0
   \   00000202   0xD00B             BEQ.N    ??ShooterGame_7
   \   00000204   0x....             LDR.N    R0,??DataTable6_11
   \   00000206   0x6800             LDR      R0,[R0, #+0]
   \   00000208   0x2800             CMP      R0,#+0
   \   0000020A   0xD107             BNE.N    ??ShooterGame_7
    385              {
    386                reload = 1200;    // create a 1200ms reload time
   \   0000020C   0xF44F 0x6096      MOV      R0,#+1200
   \   00000210   0x....             LDR.N    R1,??DataTable6_11
   \   00000212   0x6008             STR      R0,[R1, #+0]
    387                ybullet = y;
   \   00000214   0x....             LDR.N    R0,??DataTable6_8
   \   00000216   0x8800             LDRH     R0,[R0, #+0]
   \   00000218   0x....             LDR.N    R1,??DataTable6_12
   \   0000021A   0x8008             STRH     R0,[R1, #+0]
    388              }
    389              if (reload > 0)     // reload if needed, and make bullet go to the right
   \                     ??ShooterGame_7: (+1)
   \   0000021C   0x....             LDR.N    R0,??DataTable6_11
   \   0000021E   0x6800             LDR      R0,[R0, #+0]
   \   00000220   0x2800             CMP      R0,#+0
   \   00000222   0xD036             BEQ.N    ??ShooterGame_6
    390              {
    391                u16 i = 0;
   \   00000224   0x2400             MOVS     R4,#+0
    392                if (reload % 10 == 0)
   \   00000226   0x200A             MOVS     R0,#+10
   \   00000228   0x....             LDR.N    R1,??DataTable6_11
   \   0000022A   0x6809             LDR      R1,[R1, #+0]
   \   0000022C   0x....             LDR.N    R2,??DataTable6_11
   \   0000022E   0x6812             LDR      R2,[R2, #+0]
   \   00000230   0xFBB2 0xF2F0      UDIV     R2,R2,R0
   \   00000234   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   00000238   0x2800             CMP      R0,#+0
   \   0000023A   0xD10A             BNE.N    ??ShooterGame_8
    393                {
    394                  i = Fire(reload, ybullet, &objt1, &objt2, &objt3);
   \   0000023C   0x....             LDR.N    R0,??DataTable6_10
   \   0000023E   0x9000             STR      R0,[SP, #+0]
   \   00000240   0x....             LDR.N    R3,??DataTable6_7
   \   00000242   0x....             LDR.N    R2,??DataTable6_6
   \   00000244   0x....             LDR.N    R0,??DataTable6_12
   \   00000246   0x8801             LDRH     R1,[R0, #+0]
   \   00000248   0x....             LDR.N    R0,??DataTable6_11
   \   0000024A   0x6800             LDR      R0,[R0, #+0]
   \   0000024C   0x.... 0x....      BL       Fire
   \   00000250   0x0004             MOVS     R4,R0
    395                }
    396                if (i == 1) 
   \                     ??ShooterGame_8: (+1)
   \   00000252   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000254   0x2C01             CMP      R4,#+1
   \   00000256   0xD108             BNE.N    ??ShooterGame_9
    397                {
    398                  score += 3;     // score increases by 3 if a target is destroyed
   \   00000258   0x....             LDR.N    R0,??DataTable6_13
   \   0000025A   0x6800             LDR      R0,[R0, #+0]
   \   0000025C   0x1CC0             ADDS     R0,R0,#+3
   \   0000025E   0x....             LDR.N    R1,??DataTable6_13
   \   00000260   0x6008             STR      R0,[R1, #+0]
    399                  reload = 0;
   \   00000262   0x2000             MOVS     R0,#+0
   \   00000264   0x....             LDR.N    R1,??DataTable6_11
   \   00000266   0x6008             STR      R0,[R1, #+0]
   \   00000268   0xE00A             B.N      ??ShooterGame_10
    400                }
    401                else if (i == 2) 
   \                     ??ShooterGame_9: (+1)
   \   0000026A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000026C   0x2C02             CMP      R4,#+2
   \   0000026E   0xD107             BNE.N    ??ShooterGame_10
    402                {
    403                  score--;       // score decreases by 1 for each miss
   \   00000270   0x....             LDR.N    R0,??DataTable6_13
   \   00000272   0x6800             LDR      R0,[R0, #+0]
   \   00000274   0x1E40             SUBS     R0,R0,#+1
   \   00000276   0x....             LDR.N    R1,??DataTable6_13
   \   00000278   0x6008             STR      R0,[R1, #+0]
    404                  reload = 0;
   \   0000027A   0x2000             MOVS     R0,#+0
   \   0000027C   0x....             LDR.N    R1,??DataTable6_11
   \   0000027E   0x6008             STR      R0,[R1, #+0]
    405                }
    406                if (reload != 0) reload--;
   \                     ??ShooterGame_10: (+1)
   \   00000280   0x....             LDR.N    R0,??DataTable6_11
   \   00000282   0x6800             LDR      R0,[R0, #+0]
   \   00000284   0x2800             CMP      R0,#+0
   \   00000286   0xD004             BEQ.N    ??ShooterGame_6
   \   00000288   0x....             LDR.N    R0,??DataTable6_11
   \   0000028A   0x6800             LDR      R0,[R0, #+0]
   \   0000028C   0x1E40             SUBS     R0,R0,#+1
   \   0000028E   0x....             LDR.N    R1,??DataTable6_11
   \   00000290   0x6008             STR      R0,[R1, #+0]
    407              }
    408            }
    409            
    410            count++;
   \                     ??ShooterGame_6: (+1)
   \   00000292   0x....             LDR.N    R0,??DataTable6_5
   \   00000294   0x6800             LDR      R0,[R0, #+0]
   \   00000296   0x1C40             ADDS     R0,R0,#+1
   \   00000298   0x....             LDR.N    R1,??DataTable6_5
   \   0000029A   0x6008             STR      R0,[R1, #+0]
    411            
    412            // end game after a minute or if obstacle reaches left side
    413            if (count > 60000 || objt1.u16PixelColumnAddress == 0 ||objt2.u16PixelColumnAddress == 0 ||objt3.u16PixelColumnAddress == 0 )
   \   0000029C   0x....             LDR.N    R0,??DataTable6_5
   \   0000029E   0x6800             LDR      R0,[R0, #+0]
   \   000002A0   0xF64E 0x2161      MOVW     R1,#+60001
   \   000002A4   0x4288             CMP      R0,R1
   \   000002A6   0xD20C             BCS.N    ??ShooterGame_11
   \   000002A8   0x....             LDR.N    R0,??DataTable6_6
   \   000002AA   0x8840             LDRH     R0,[R0, #+2]
   \   000002AC   0x2800             CMP      R0,#+0
   \   000002AE   0xD008             BEQ.N    ??ShooterGame_11
   \   000002B0   0x....             LDR.N    R0,??DataTable6_7
   \   000002B2   0x8840             LDRH     R0,[R0, #+2]
   \   000002B4   0x2800             CMP      R0,#+0
   \   000002B6   0xD004             BEQ.N    ??ShooterGame_11
   \   000002B8   0x....             LDR.N    R0,??DataTable6_10
   \   000002BA   0x8840             LDRH     R0,[R0, #+2]
   \   000002BC   0x2800             CMP      R0,#+0
   \   000002BE   0xF040 0x809F      BNE.W    ??ShooterGame_12
    414            {
    415              LcdClearScreen();
   \                     ??ShooterGame_11: (+1)
   \   000002C2   0x.... 0x....      BL       LcdClearScreen
    416              
    417              /* Game was lost because the obstacle reached the left side of the screen */
    418              if (objt1.u16PixelColumnAddress == 0 ||objt2.u16PixelColumnAddress == 0 ||objt3.u16PixelColumnAddress == 0) 
   \   000002C6   0x....             LDR.N    R0,??DataTable6_6
   \   000002C8   0x8840             LDRH     R0,[R0, #+2]
   \   000002CA   0x2800             CMP      R0,#+0
   \   000002CC   0xD007             BEQ.N    ??ShooterGame_13
   \   000002CE   0x....             LDR.N    R0,??DataTable6_7
   \   000002D0   0x8840             LDRH     R0,[R0, #+2]
   \   000002D2   0x2800             CMP      R0,#+0
   \   000002D4   0xD003             BEQ.N    ??ShooterGame_13
   \   000002D6   0x....             LDR.N    R0,??DataTable6_10
   \   000002D8   0x8840             LDRH     R0,[R0, #+2]
   \   000002DA   0x2800             CMP      R0,#+0
   \   000002DC   0xD11A             BNE.N    ??ShooterGame_14
    419              {
    420                u8 au8DataContent0[] = "Your Score: 000";
   \                     ??ShooterGame_13: (+1)
   \   000002DE   0xA81C             ADD      R0,SP,#+112
   \   000002E0   0x....             LDR.N    R1,??DataTable6_14
   \   000002E2   0x2210             MOVS     R2,#+16
   \   000002E4   0x.... 0x....      BL       __aeabi_memcpy4
    421                u8 au8DataContentL[] = "You Lose";
   \   000002E8   0xA80D             ADD      R0,SP,#+52
   \   000002EA   0x....             LDR.N    R1,??DataTable6_15
   \   000002EC   0x2209             MOVS     R2,#+9
   \   000002EE   0x.... 0x....      BL       __aeabi_memcpy
    422                PixelAddressType loc0 = {5, 0};
   \   000002F2   0x....             LDR.N    R0,??DataTable6_16
   \   000002F4   0x6800             LDR      R0,[R0, #+0]
   \   000002F6   0x9005             STR      R0,[SP, #+20]
    423                LcdLoadString(au8DataContent0, LCD_FONT_SMALL, &loc0);
   \   000002F8   0xAA05             ADD      R2,SP,#+20
   \   000002FA   0x2100             MOVS     R1,#+0
   \   000002FC   0xA81C             ADD      R0,SP,#+112
   \   000002FE   0x.... 0x....      BL       LcdLoadString
    424                PixelAddressType locL = {25, 0};
   \   00000302   0x....             LDR.N    R0,??DataTable6_17
   \   00000304   0x6800             LDR      R0,[R0, #+0]
   \   00000306   0x9004             STR      R0,[SP, #+16]
    425                LcdLoadString(au8DataContentL, LCD_FONT_SMALL, &locL);
   \   00000308   0xAA04             ADD      R2,SP,#+16
   \   0000030A   0x2100             MOVS     R1,#+0
   \   0000030C   0xA80D             ADD      R0,SP,#+52
   \   0000030E   0x.... 0x....      BL       LcdLoadString
   \   00000312   0xE043             B.N      ??ShooterGame_15
    426              }
    427              /* Game was won. The player lasted a minute and prevented any obstacles from reaching the left side */
    428              else
    429              {
    430                if (score < 0) score = 0; 
   \                     ??ShooterGame_14: (+1)
   \   00000314   0x....             LDR.N    R0,??DataTable6_13
   \   00000316   0x6800             LDR      R0,[R0, #+0]
   \   00000318   0x2800             CMP      R0,#+0
   \   0000031A   0xD502             BPL.N    ??ShooterGame_16
   \   0000031C   0x2000             MOVS     R0,#+0
   \   0000031E   0x....             LDR.N    R1,??DataTable6_13
   \   00000320   0x6008             STR      R0,[R1, #+0]
    431                u8 digit100 = score / 100; 
   \                     ??ShooterGame_16: (+1)
   \   00000322   0x....             LDR.N    R0,??DataTable6_13
   \   00000324   0x6800             LDR      R0,[R0, #+0]
   \   00000326   0x2164             MOVS     R1,#+100
   \   00000328   0xFB90 0xF4F1      SDIV     R4,R0,R1
    432                u8 digit10  = (score / 10) - (10*digit100);
   \   0000032C   0x....             LDR.N    R0,??DataTable6_13
   \   0000032E   0x6800             LDR      R0,[R0, #+0]
   \   00000330   0x210A             MOVS     R1,#+10
   \   00000332   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000336   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000338   0x210A             MOVS     R1,#+10
   \   0000033A   0xFB01 0x0514      MLS      R5,R1,R4,R0
    433                u8 digit1   = score % 10;
   \   0000033E   0x200A             MOVS     R0,#+10
   \   00000340   0x....             LDR.N    R1,??DataTable6_13
   \   00000342   0x6809             LDR      R1,[R1, #+0]
   \   00000344   0x....             LDR.N    R2,??DataTable6_13
   \   00000346   0x6812             LDR      R2,[R2, #+0]
   \   00000348   0xFB92 0xF2F0      SDIV     R2,R2,R0
   \   0000034C   0xFB00 0x1612      MLS      R6,R0,R2,R1
    434                
    435                u8 au8DataContent[] = "Your Score:    ";
   \   00000350   0xA806             ADD      R0,SP,#+24
   \   00000352   0x....             LDR.N    R1,??DataTable6_18
   \   00000354   0x2210             MOVS     R2,#+16
   \   00000356   0x.... 0x....      BL       __aeabi_memcpy4
    436                au8DataContent[12] = digit100 + 48;
   \   0000035A   0xF114 0x0030      ADDS     R0,R4,#+48
   \   0000035E   0xF88D 0x0024      STRB     R0,[SP, #+36]
    437                au8DataContent[13] = digit10  + 48;
   \   00000362   0xF115 0x0030      ADDS     R0,R5,#+48
   \   00000366   0xF88D 0x0025      STRB     R0,[SP, #+37]
    438                au8DataContent[14] = digit1  + 48;
   \   0000036A   0xF116 0x0030      ADDS     R0,R6,#+48
   \   0000036E   0xF88D 0x0026      STRB     R0,[SP, #+38]
    439                PixelAddressType loc1 = {5, 0};
   \   00000372   0x....             LDR.N    R0,??DataTable6_19
   \   00000374   0x6800             LDR      R0,[R0, #+0]
   \   00000376   0x9003             STR      R0,[SP, #+12]
    440                LcdLoadString(au8DataContent, LCD_FONT_SMALL, &loc1);
   \   00000378   0xAA03             ADD      R2,SP,#+12
   \   0000037A   0x2100             MOVS     R1,#+0
   \   0000037C   0xA806             ADD      R0,SP,#+24
   \   0000037E   0x.... 0x....      BL       LcdLoadString
    441                u8 au8DataContentW[] = "You Win!";
   \   00000382   0xA80A             ADD      R0,SP,#+40
   \   00000384   0x....             LDR.N    R1,??DataTable6_20
   \   00000386   0x2209             MOVS     R2,#+9
   \   00000388   0x.... 0x....      BL       __aeabi_memcpy
    442                PixelAddressType locW = {25, 0};
   \   0000038C   0x....             LDR.N    R0,??DataTable6_21
   \   0000038E   0x6800             LDR      R0,[R0, #+0]
   \   00000390   0x9002             STR      R0,[SP, #+8]
    443                LcdLoadString(au8DataContentW, LCD_FONT_SMALL, &locW);
   \   00000392   0xAA02             ADD      R2,SP,#+8
   \   00000394   0x2100             MOVS     R1,#+0
   \   00000396   0xA80A             ADD      R0,SP,#+40
   \   00000398   0x.... 0x....      BL       LcdLoadString
    444              }
    445              
    446              u8 au8DataContent2[] = "Push Button0 to Exit";
   \                     ??ShooterGame_15: (+1)
   \   0000039C   0xA816             ADD      R0,SP,#+88
   \   0000039E   0x....             LDR.N    R1,??DataTable6_22
   \   000003A0   0x2215             MOVS     R2,#+21
   \   000003A2   0x.... 0x....      BL       __aeabi_memcpy
    447              PixelAddressType loc2 = {55, 0};
   \   000003A6   0x....             LDR.N    R0,??DataTable6_23
   \   000003A8   0x6800             LDR      R0,[R0, #+0]
   \   000003AA   0x9001             STR      R0,[SP, #+4]
    448              LcdLoadString(au8DataContent2, LCD_FONT_SMALL, &loc2);
   \   000003AC   0xAA01             ADD      R2,SP,#+4
   \   000003AE   0x2100             MOVS     R1,#+0
   \   000003B0   0xA816             ADD      R0,SP,#+88
   \   000003B2   0x.... 0x....      BL       LcdLoadString
    449              
    450              CapTouchOff();
   \   000003B6   0x.... 0x....      BL       CapTouchOff
    451              PWMAudioOff(BUZZER1);
   \   000003BA   0x2001             MOVS     R0,#+1
   \   000003BC   0x.... 0x....      BL       PWMAudioOff
    452              
    453              count = 0;
   \   000003C0   0x2000             MOVS     R0,#+0
   \   000003C2   0x....             LDR.N    R1,??DataTable6_5
   \   000003C4   0x6008             STR      R0,[R1, #+0]
    454              score = 0; 
   \   000003C6   0x2000             MOVS     R0,#+0
   \   000003C8   0x....             LDR.N    R1,??DataTable6_13
   \   000003CA   0x6008             STR      R0,[R1, #+0]
    455              reload = 0;
   \   000003CC   0x2000             MOVS     R0,#+0
   \   000003CE   0x....             LDR.N    R1,??DataTable6_11
   \   000003D0   0x6008             STR      R0,[R1, #+0]
    456              ybullet = 32;
   \   000003D2   0x2020             MOVS     R0,#+32
   \   000003D4   0x....             LDR.N    R1,??DataTable6_12
   \   000003D6   0x8008             STRH     R0,[R1, #+0]
    457              y = 32;
   \   000003D8   0x2020             MOVS     R0,#+32
   \   000003DA   0x....             LDR.N    R1,??DataTable6_8
   \   000003DC   0x8008             STRH     R0,[R1, #+0]
    458              objt1.u16PixelColumnAddress = 127;
   \   000003DE   0x207F             MOVS     R0,#+127
   \   000003E0   0x....             LDR.N    R1,??DataTable6_6
   \   000003E2   0x8048             STRH     R0,[R1, #+2]
    459              objt2.u16PixelColumnAddress = 125;
   \   000003E4   0x207D             MOVS     R0,#+125
   \   000003E6   0x....             LDR.N    R1,??DataTable6_7
   \   000003E8   0x8048             STRH     R0,[R1, #+2]
    460              objt3.u16PixelColumnAddress = 123;
   \   000003EA   0x207B             MOVS     R0,#+123
   \   000003EC   0x....             LDR.N    R1,??DataTable6_10
   \   000003EE   0x8048             STRH     R0,[R1, #+2]
    461              speed = 500;
   \   000003F0   0xF44F 0x70FA      MOV      R0,#+500
   \   000003F4   0x....             LDR.N    R1,??DataTable6_9
   \   000003F6   0x8008             STRH     R0,[R1, #+0]
    462              
    463              ShooterGame_StateMachine = GameOver;
   \   000003F8   0x.... 0x....      ADR.W    R0,GameOver
   \   000003FC   0x....             LDR.N    R1,??DataTable6
   \   000003FE   0x6008             STR      R0,[R1, #+0]
    464            }
    465            
    466            
    467            if(IsButtonPressed(BUTTON0))                  // reset game if Button0 is pressed
   \                     ??ShooterGame_12: (+1)
   \   00000400   0x2000             MOVS     R0,#+0
   \   00000402   0x.... 0x....      BL       IsButtonPressed
   \   00000406   0x2800             CMP      R0,#+0
   \   00000408   0xD032             BEQ.N    ??ShooterGame_17
    468            {
    469              LcdClearScreen();
   \   0000040A   0x.... 0x....      BL       LcdClearScreen
    470              u8 au8DataContent[] = "Push Button1 to Play";
   \   0000040E   0xA810             ADD      R0,SP,#+64
   \   00000410   0x....             LDR.N    R1,??DataTable6_24
   \   00000412   0x2215             MOVS     R2,#+21
   \   00000414   0x.... 0x....      BL       __aeabi_memcpy
    471              PixelAddressType loc1 = {15, 0};
   \   00000418   0x....             LDR.N    R0,??DataTable6_25
   \   0000041A   0x6800             LDR      R0,[R0, #+0]
   \   0000041C   0x9000             STR      R0,[SP, #+0]
    472              LcdLoadString(au8DataContent, LCD_FONT_SMALL, &loc1);
   \   0000041E   0xAA00             ADD      R2,SP,#+0
   \   00000420   0x2100             MOVS     R1,#+0
   \   00000422   0xA810             ADD      R0,SP,#+64
   \   00000424   0x.... 0x....      BL       LcdLoadString
    473              CapTouchOff();
   \   00000428   0x.... 0x....      BL       CapTouchOff
    474              PWMAudioOff(BUZZER1);
   \   0000042C   0x2001             MOVS     R0,#+1
   \   0000042E   0x.... 0x....      BL       PWMAudioOff
    475              
    476              count = 0;
   \   00000432   0x2000             MOVS     R0,#+0
   \   00000434   0x....             LDR.N    R1,??DataTable6_5
   \   00000436   0x6008             STR      R0,[R1, #+0]
    477              score = 0; 
   \   00000438   0x2000             MOVS     R0,#+0
   \   0000043A   0x....             LDR.N    R1,??DataTable6_13
   \   0000043C   0x6008             STR      R0,[R1, #+0]
    478              reload = 0;
   \   0000043E   0x2000             MOVS     R0,#+0
   \   00000440   0x....             LDR.N    R1,??DataTable6_11
   \   00000442   0x6008             STR      R0,[R1, #+0]
    479              ybullet = 32;
   \   00000444   0x2020             MOVS     R0,#+32
   \   00000446   0x....             LDR.N    R1,??DataTable6_12
   \   00000448   0x8008             STRH     R0,[R1, #+0]
    480              y = 32;
   \   0000044A   0x2020             MOVS     R0,#+32
   \   0000044C   0x....             LDR.N    R1,??DataTable6_8
   \   0000044E   0x8008             STRH     R0,[R1, #+0]
    481              objt1.u16PixelColumnAddress = 127;
   \   00000450   0x207F             MOVS     R0,#+127
   \   00000452   0x....             LDR.N    R1,??DataTable6_6
   \   00000454   0x8048             STRH     R0,[R1, #+2]
    482              objt2.u16PixelColumnAddress = 125;
   \   00000456   0x207D             MOVS     R0,#+125
   \   00000458   0x....             LDR.N    R1,??DataTable6_7
   \   0000045A   0x8048             STRH     R0,[R1, #+2]
    483              objt3.u16PixelColumnAddress = 123;
   \   0000045C   0x207B             MOVS     R0,#+123
   \   0000045E   0x....             LDR.N    R1,??DataTable6_10
   \   00000460   0x8048             STRH     R0,[R1, #+2]
    484              speed = 500;
   \   00000462   0xF44F 0x70FA      MOV      R0,#+500
   \   00000466   0x....             LDR.N    R1,??DataTable6_9
   \   00000468   0x8008             STRH     R0,[R1, #+0]
    485              
    486              ShooterGame_StateMachine = Menu;
   \   0000046A   0x....             LDR.N    R0,??DataTable6_26
   \   0000046C   0x....             LDR.N    R1,??DataTable6
   \   0000046E   0x6008             STR      R0,[R1, #+0]
    487            }
    488            
    489          }
   \                     ??ShooterGame_17: (+1)
   \   00000470   0xB020             ADD      SP,SP,#+128
   \   00000472   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??count:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??score:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??reload:
   \   00000000                      DS8 4

   \                                 In section .data, align 2
   \                     ??ybullet:
   \   00000000   0x0020             DC16 32

   \                                 In section .data, align 2
   \                     ??y:
   \   00000000   0x0020             DC16 32

   \                                 In section .data, align 4
   \                     ??objt1:
   \   00000000   0x0020 0x007F      DC16 32, 127

   \                                 In section .data, align 4
   \                     ??objt2:
   \   00000000   0x002A 0x007D      DC16 42, 125

   \                                 In section .data, align 4
   \                     ??objt3:
   \   00000000   0x0016 0x007B      DC16 22, 123

   \                                 In section .data, align 2
   \                     ??speed:
   \   00000000   0x01F4             DC16 500
    490          

   \                                 In section .text, align 4, keep-with-next
    491          static void GameOver(void)
    492          {
   \                     GameOver: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    493            if(IsButtonPressed(BUTTON0))
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       IsButtonPressed
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD002             BEQ.N    ??GameOver_0
    494            {
    495              ShooterGame_StateMachine = Menu;
   \   0000000C   0x....             LDR.N    R0,??DataTable6_26
   \   0000000E   0x....             LDR.N    R1,??DataTable6
   \   00000010   0x6008             STR      R0,[R1, #+0]
    496            } 
    497          } /* end GameOver() */
   \                     ??GameOver_0: (+1)
   \   00000012   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     ShooterGame_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     ??count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     ??objt1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     ??objt2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     ??y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     ??speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x........         DC32     ??objt3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x........         DC32     ??reload

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x........         DC32     ??ybullet

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x........         DC32     ??score

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_19:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_20:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_21:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_22:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_23:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_24:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_25:
   \   00000000   0x........         DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_26:
   \   00000000   0x........         DC32     Menu

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x50 0x75          DC8 "Push Button1 to Play"
   \              0x73 0x68    
   \              0x20 0x42    
   \              0x75 0x74    
   \              0x74 0x6F    
   \              0x6E 0x31    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x50 0x6C    
   \              0x61 0x79    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x000F 0x0000      DC16 15, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x0000 0x0008      DC16 0, 8

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x0000 0x0002      DC16 0, 2

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x59 0x6F          DC8 "Your Score: 000"
   \              0x75 0x72    
   \              0x20 0x53    
   \              0x63 0x6F    
   \              0x72 0x65    
   \              0x3A 0x20    
   \              0x30 0x30    
   \              0x30 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x59 0x6F          DC8 "You Lose"
   \              0x75 0x20    
   \              0x4C 0x6F    
   \              0x73 0x65    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x0005 0x0000      DC16 5, 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x0019 0x0000      DC16 25, 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x59 0x6F          DC8 "Your Score:    "
   \              0x75 0x72    
   \              0x20 0x53    
   \              0x63 0x6F    
   \              0x72 0x65    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x0005 0x0000      DC16 5, 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x59 0x6F          DC8 "You Win!"
   \              0x75 0x20    
   \              0x57 0x69    
   \              0x6E 0x21    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x0019 0x0000      DC16 25, 0

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x50 0x75          DC8 "Push Button0 to Exit"
   \              0x73 0x68    
   \              0x20 0x42    
   \              0x75 0x74    
   \              0x74 0x6F    
   \              0x6E 0x30    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x45 0x78    
   \              0x69 0x74    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x0037 0x0000      DC16 55, 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x50 0x75          DC8 "Push Button1 to Play"
   \              0x73 0x68    
   \              0x20 0x42    
   \              0x75 0x74    
   \              0x74 0x6F    
   \              0x6E 0x31    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x50 0x6C    
   \              0x61 0x79    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x000F 0x0000      DC16 15, 0
    498          
    499          
    500          /*-------------------------------------------------------------------------------------------------------------------*/
    501          /* Handle an error */
    502          static void ShooterGameSM_Error(void)          
                             ^
Warning[Pe177]: function "ShooterGameSM_Error" was declared but never
          referenced

  static u32 ShooterGame_u32Timeout;                      /* Timeout counter used across states */
             ^
"C:\Users\Jonathan\Desktop\Shooter Game\firmware_mpg_common\application\shooter-game.c",53  Warning[Pe177]: 
          variable "ShooterGame_u32Timeout" was declared but never referenced
    503          {
    504            ShooterGame_StateMachine = Menu;  
    505          } /* end ShooterGameSM_Error() */
    506          
    507          
    508          /*-------------------------------------------------------------------------------------------------------------------*/
    509          /* State to sit in if init failed */
    510          static void ShooterGameSM_FailedInit(void)          
    511          {
    512            
    513          } /* end ShooterGameSM_FailedInit() */
    514          
    515          
    516          /*--------------------------------------------------------------------------------------------------------------------*/
    517          /* End of File                                                                                                        */
    518          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   CenterGun
        16   -> LcdClearPixel
        16   -> LcdSetPixel
      32   Fire
        32   -> LcdClearPixel
        32   -> LcdSetPixel
        32   -> PlaceObjectR
       8   GameOver
         8   -> IsButtonPressed
       8   Menu
         8   -> ButtonAcknowledge
         8   -> CapTouchOn
         8   -> CenterGun
         8   -> LcdClearScreen
         8   -> WasButtonPressed
       8   PlaceObject
         8   -> LcdSetPixel
       8   PlaceObjectR
         8   -> LcdSetPixel
         8   -> rand
     144   ShooterGame
       144   -> CapTouchOff
       144   -> CaptouchCurrentVSlidePosition
       144   -> CenterGun
       144   -> Fire
       144   -> IsButtonPressed
       144   -> LcdClearPixel
       144   -> LcdClearScreen
       144   -> LcdLoadString
       144   -> PWMAudioOff
       144   -> PlaceObject
       144   -> PlaceObjectR
       144   -> __aeabi_memcpy
       144   -> __aeabi_memcpy4
      32   ShooterGameInitialize
        32   -> LcdClearScreen
        32   -> LcdLoadString
        32   -> LedOff
        32   -> __aeabi_memcpy
       8   ShooterGameRunActiveState
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_21
       4  ??DataTable6_22
       4  ??DataTable6_23
       4  ??DataTable6_24
       4  ??DataTable6_25
       4  ??DataTable6_26
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      24  ?_0
       4  ?_1
      12  ?_10
       4  ?_11
      24  ?_12
       4  ?_13
      24  ?_14
       4  ?_15
       4  ?_2
       4  ?_3
      16  ?_4
      12  ?_5
       4  ?_6
       4  ?_7
      16  ?_8
       4  ?_9
     276  CenterGun
     406  Fire
       4  G_u32ShooterGameFlags
      20  GameOver
      44  Menu
      42  PlaceObject
      60  PlaceObjectR
    1140  ShooterGame
     124  ShooterGameInitialize
      12  ShooterGameRunActiveState
       4  ShooterGame_StateMachine
       4  count
       4  objt1
       4  objt2
       4  objt3
       4  reload
       4  score
       2  speed
       2  y
       2  ybullet

 
    20 bytes in section .bss
    18 bytes in section .data
   164 bytes in section .rodata
 2 232 bytes in section .text
 
 2 232 bytes of CODE  memory
   164 bytes of CONST memory
    38 bytes of DATA  memory

Errors: none
Warnings: 3
